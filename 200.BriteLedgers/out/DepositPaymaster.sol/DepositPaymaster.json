{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COST_OF_POST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "tokenPriceOracle",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTokenDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPaymaster.PostOpMode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlockBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTokenDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCost",
          "type": "uint256"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokensTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "1572:6606:30:-:0;;;2019:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2070:11;936:32:10;719:10:24;936:18:10;:32::i;:::-;-1:-1:-1;;;;;564:24:1;;;2165:20:30::1;3985:10:::0;3973:23;;;;:11;:23;;;;;3999:12;3973:38;;3926:92;2165:20:::1;2019:173:::0;1572:6606;;2433:187:10;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:10;;;-1:-1:-1;;;;;;2541:17:10;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:309:36:-;103:6;156:2;144:9;135:7;131:23;127:32;124:52;;;172:1;169;162:12;124:52;198:16;;-1:-1:-1;;;;;243:31:36;;233:42;;223:70;;289:1;286;279:12;223:70;312:5;14:309;-1:-1:-1;;;14:309:36:o;:::-;1572:6606:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101355760003560e01c8063addd5099116100ab578063c399ec881161006f578063c399ec88146103ce578063cc9c837c146103e3578063cd8f80c214610403578063d0e30db014610425578063f2fde38b1461042d578063f465c77e1461044d57600080fd5b8063addd5099146102f7578063b0d691fe1461032d578063bb9fe6bf14610361578063c23a5cea14610376578063c23f001f1461039657600080fd5b80635476bd72116100fd5780635476bd7214610236578063715018a614610256578063796d43711461026b5780638da5cb5b146102815780639ed0fb68146102b3578063a9a23409146102d757600080fd5b80630396cb601461013a578063205c28781461014f578063382edd9e1461016f578063493b01701461018f5780634a6f84cf146101fb575b600080fd5b61014d610148366004611346565b61047b565b005b34801561015b57600080fd5b5061014d61016a366004611381565b610506565b34801561017b57600080fd5b5061014d61018a3660046113ad565b610578565b34801561019b57600080fd5b506101e16101aa3660046113ee565b6001600160a01b03918216600090815260026020908152604080832093909416825291825282812054600390925291909120549091565b604080519283526020830191909152015b60405180910390f35b34801561020757600080fd5b50610228610216366004611427565b60036020526000908152604090205481565b6040519081526020016101f2565b34801561024257600080fd5b5061014d6102513660046113ee565b610653565b34801561026257600080fd5b5061014d6106e5565b34801561027757600080fd5b506102286188b881565b34801561028d57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101f2565b3480156102bf57600080fd5b5061014d336000908152600360205260409020439055565b3480156102e357600080fd5b5061014d6102f2366004611444565b6106f9565b34801561030357600080fd5b5061029b610312366004611427565b6001602052600090815260409020546001600160a01b031681565b34801561033957600080fd5b5061029b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036d57600080fd5b5061014d610713565b34801561038257600080fd5b5061014d610391366004611427565b61078a565b3480156103a257600080fd5b506102286103b13660046113ee565b600260209081526000928352604080842090915290825290205481565b3480156103da57600080fd5b50610228610810565b3480156103ef57600080fd5b5061014d6103fe3660046113ad565b6108a0565b34801561040f57600080fd5b5061014d33600090815260036020526040812055565b61014d610977565b34801561043957600080fd5b5061014d610448366004611427565b6109d9565b34801561045957600080fd5b5061046d6104683660046114d3565b610a52565b6040516101f2929190611577565b610483610a75565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505050505050565b61050e610a75565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b1580156104ea57600080fd5b61058d6001600160a01b038416333084610acf565b6001600160a01b03838116600090815260016020526040902054166105ed5760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b60448201526064015b60405180910390fd5b6001600160a01b038084166000908152600260209081526040808320938616835292905290812080548392906106249084906115af565b90915550506001600160a01b038216330361064e5761064e33600090815260036020526040812055565b505050565b61065b610a75565b6001600160a01b0382811660009081526001602052604090205416156106b75760405162461bcd60e51b8152602060048201526011602482015270151bdad95b88185b1c9958591e481cd95d607a1b60448201526064016105e4565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6106ed610a75565b6106f76000610b3a565b565b610701610b8a565b61070d84848484610bfa565b50505050565b61071b610a75565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561077657600080fd5b505af115801561070d573d6000803e3d6000fd5b610792610a75565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b91906115c2565b905090565b33600090815260036020526040902054158015906108cc57503360009081526003602052604090205443115b61092a5760405162461bcd60e51b815260206004820152602960248201527f4465706f7369745061796d61737465723a206d75737420756e6c6f636b546f6b604482015268195b91195c1bdcda5d60ba1b60648201526084016105e4565b6001600160a01b03831660009081526002602090815260408083203384529091528120805483929061095d9084906115db565b9091555061064e90506001600160a01b0384168383610d24565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b1580156107f557600080fd5b6109e1610a75565b6001600160a01b038116610a465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e4565b610a4f81610b3a565b50565b60606000610a5e610b8a565b610a69858585610d54565b91509150935093915050565b6000546001600160a01b031633146106f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e4565b6040516001600160a01b038085166024830152831660448201526064810182905261070d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610fbc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f75760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b60448201526064016105e4565b600080808080610c0c878901896115ee565b9450945094509450945060008183856188b8610c28919061163f565b610c32908a6115af565b610c3c919061163f565b610c469190611656565b905060028a6002811115610c5c57610c5c611678565b14610c7b57610c766001600160a01b038616873084610acf565b610cb8565b6001600160a01b038086166000908152600260209081526040808320938a1683529290529081208054839290610cb29084906115db565b90915550505b6001600160a01b03851660009081526002602052604081208291610ce46000546001600160a01b031690565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610d1391906115af565b909155505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261064e90849063a9059cbb60e01b90606401610b03565b606060006188b88560a0013511610dbe5760405162461bcd60e51b815260206004820152602860248201527f4465706f7369745061796d61737465723a2067617320746f6f206c6f7720666f60448201526707220706f73744f760c41b60648201526084016105e4565b366000610dcf61012088018861168e565b909250905060288114610e425760405162461bcd60e51b815260206004820152603560248201527f4465706f7369745061796d61737465723a207061796d6173746572416e6444616044820152743a309036bab9ba1039b832b1b4b33c903a37b5b2b760591b60648201526084016105e4565b6000610e5182601481866116dc565b610e5a91611706565b60601c905087356000610e6d838961108e565b90506000610e7a8b611177565b6001600160a01b03841660009081526003602052604090205490915015610eef5760405162461bcd60e51b8152602060048201526024808201527f4465706f7369745061796d61737465723a206465706f736974206e6f74206c6f60448201526318dad95960e21b60648201526084016105e4565b6001600160a01b03808516600090815260026020908152604080832093871683529290522054821115610f6e5760405162461bcd60e51b815260206004820152602160248201527f4465706f7369745061796d61737465723a206465706f73697420746f6f206c6f6044820152607760f81b60648201526084016105e4565b604080516001600160a01b03948516602082015294909316848401526060840152608083015260a0808301979097528051808303909701875260c09091019052509295600095509350505050565b6000611011826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111a69092919063ffffffff16565b80519091501561064e578080602001905181019061102f919061173b565b61064e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105e4565b6001600160a01b03808316600090815260016020526040812054909116806111045760405162461bcd60e51b815260206004820152602360248201527f4465706f7369745061796d61737465723a20756e737570706f7274656420746f60448201526235b2b760e91b60648201526084016105e4565b60405163d1eca9cf60e01b8152600481018490526001600160a01b0382169063d1eca9cf90602401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d91906115c2565b9150505b92915050565b600060e0820135610100830135808203611192575092915050565b61119e824883016111b5565b949350505050565b606061119e84846000856111cd565b60008183106111c457816111c6565b825b9392505050565b60608247101561122e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105e4565b600080866001600160a01b0316858760405161124a919061175d565b60006040518083038185875af1925050503d8060008114611287576040519150601f19603f3d011682016040523d82523d6000602084013e61128c565b606091505b509150915061129d878383876112a8565b979650505050505050565b60608315611317578251600003611310576001600160a01b0385163b6113105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105e4565b508161119e565b61119e838381511561132c5781518083602001fd5b8060405162461bcd60e51b81526004016105e49190611779565b60006020828403121561135857600080fd5b813563ffffffff811681146111c657600080fd5b6001600160a01b0381168114610a4f57600080fd5b6000806040838503121561139457600080fd5b823561139f8161136c565b946020939093013593505050565b6000806000606084860312156113c257600080fd5b83356113cd8161136c565b925060208401356113dd8161136c565b929592945050506040919091013590565b6000806040838503121561140157600080fd5b823561140c8161136c565b9150602083013561141c8161136c565b809150509250929050565b60006020828403121561143957600080fd5b81356111c68161136c565b6000806000806060858703121561145a57600080fd5b84356003811061146957600080fd5b9350602085013567ffffffffffffffff8082111561148657600080fd5b818701915087601f83011261149a57600080fd5b8135818111156114a957600080fd5b8860208285010111156114bb57600080fd5b95986020929092019750949560400135945092505050565b6000806000606084860312156114e857600080fd5b833567ffffffffffffffff8111156114ff57600080fd5b8401610160818703121561151257600080fd5b95602085013595506040909401359392505050565b60005b8381101561154257818101518382015260200161152a565b50506000910152565b60008151808452611563816020860160208601611527565b601f01601f19169290920160200192915050565b60408152600061158a604083018561154b565b90508260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561117157611171611599565b6000602082840312156115d457600080fd5b5051919050565b8181038181111561117157611171611599565b600080600080600060a0868803121561160657600080fd5b85356116118161136c565b945060208601356116218161136c565b94979496505050506040830135926060810135926080909101359150565b808202811582820484141761117157611171611599565b60008261167357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b6000808335601e198436030181126116a557600080fd5b83018035915067ffffffffffffffff8211156116c057600080fd5b6020019150368190038213156116d557600080fd5b9250929050565b600080858511156116ec57600080fd5b838611156116f957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156117335780818660140360031b1b83161692505b505092915050565b60006020828403121561174d57600080fd5b815180151581146111c657600080fd5b6000825161176f818460208701611527565b9190910192915050565b6020815260006111c6602083018461154b56fea26469706673582212208466a5286875e2f753cb0c26855f374e16a0af910ce6d69c2902849d1518ec3264736f6c63430008140033",
    "sourceMap": "1572:6606:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:141:1;;;;;;:::i;:::-;;:::i;:::-;;2721:149;;;;;;;;;;-1:-1:-1;2721:149:1;;;;;:::i;:::-;;:::i;3002:401:30:-;;;;;;;;;;-1:-1:-1;3002:401:30;;;;;:::i;:::-;;:::i;3589:206::-;;;;;;;;;;-1:-1:-1;3589:206:30;;;;;:::i;:::-;-1:-1:-1;;;;;3719:15:30;;;3662:14;3719:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;3768:11;:20;;;;;;;;3719:24;;3589:206;;;;;1865:25:36;;;1921:2;1906:18;;1899:34;;;;1838:18;3589:206:30;;;;;;;;1966:46;;;;;;;;;;-1:-1:-1;1966:46:30;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2350:25:36;;;2338:2;2323:18;1966:46:30;2204:177:36;2272:196:30;;;;;;;;;;-1:-1:-1;2272:196:30;;;;;:::i;:::-;;:::i;1831:101:10:-;;;;;;;;;;;;;:::i;1736:44:30:-;;;;;;;;;;;;1775:5;1736:44;;1201:85:10;;;;;;;;;;-1:-1:-1;1247:7:10;1273:6;-1:-1:-1;;;;;1273:6:10;1201:85;;;-1:-1:-1;;;;;2990:32:36;;;2972:51;;2960:2;2945:18;1201:85:10;2826:203:36;3926:92:30;;;;;;;;;;;;3985:10;3973:23;;;;:11;:23;;;;;3999:12;3973:38;;3926:92;1143:186:1;;;;;;;;;;-1:-1:-1;1143:186:1;;;;;:::i;:::-;;:::i;1851:41:30:-;;;;;;;;;;-1:-1:-1;1851:41:30;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1851:41:30;;;471:39:1;;;;;;;;;;;;;;;3588:83;;;;;;;;;;;;;:::i;3890:133::-;;;;;;;;;;-1:-1:-1;3890:133:1;;;;;:::i;:::-;;:::i;1898:62:30:-;;;;;;;;;;-1:-1:-1;1898:62:30;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3318:111:1;;;;;;;;;;;;;:::i;4562:345:30:-;;;;;;;;;;-1:-1:-1;4562:345:30;;;;;:::i;:::-;;:::i;4235:79::-;;;;;;;;;;;;4292:10;4306:1;4280:23;;;:11;:23;;;;;:27;4235:79;2474:105:1;;;:::i;2081:198:10:-;;;;;;;;;;-1:-1:-1;2081:198:10;;;;;:::i;:::-;;:::i;632:290:1:-;;;;;;;;;;-1:-1:-1;632:290:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3094:141::-;1094:13:10;:11;:13::i;:::-;3173:55:1::1;::::0;-1:-1:-1;;;3173:55:1;;6381:10:36;6369:23;;3173:55:1::1;::::0;::::1;6351:42:36::0;3173:10:1::1;-1:-1:-1::0;;;;;3173:19:1::1;::::0;::::1;::::0;3201:9:::1;::::0;6324:18:36;;3173:55:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;3094:141:::0;:::o;2721:149::-;1094:13:10;:11;:13::i;:::-;2817:46:1::1;::::0;-1:-1:-1;;;2817:46:1;;-1:-1:-1;;;;;6612:32:36;;;2817:46:1::1;::::0;::::1;6594:51:36::0;6661:18;;;6654:34;;;2817:10:1::1;:21;::::0;::::1;::::0;6567:18:36;;2817:46:1::1;;;;;;;;;;;;;;;;;::::0;::::1;3002:401:30::0;3147:57;-1:-1:-1;;;;;3147:22:30;;3170:10;3190:4;3197:6;3147:22;:57::i;:::-;-1:-1:-1;;;;;3222:14:30;;;1842:1;3222:14;;;:7;:14;;;;;;;3214:59;;;;-1:-1:-1;;;3214:59:30;;6901:2:36;3214:59:30;;;6883:21:36;6940:2;6920:18;;;6913:30;-1:-1:-1;;;6959:18:36;;;6952:47;7016:18;;3214:59:30;;;;;;;;;-1:-1:-1;;;;;3283:15:30;;;;;;;:8;:15;;;;;;;;:24;;;;;;;;;;;:34;;3311:6;;3283:15;:34;;3311:6;;3283:34;:::i;:::-;;;;-1:-1:-1;;;;;;;3331:21:30;;:10;:21;3327:70;;3368:18;4292:10;4306:1;4280:23;;;:11;:23;;;;;:27;4235:79;3368:18;3002:401;;;:::o;2272:196::-;1094:13:10;:11;:13::i;:::-;-1:-1:-1;;;;;2367:14:30;;::::1;1842:1;2367:14:::0;;;:7:::1;:14;::::0;;;;;::::1;:29:::0;2359:59:::1;;;::::0;-1:-1:-1;;;2359:59:30;;7509:2:36;2359:59:30::1;::::0;::::1;7491:21:36::0;7548:2;7528:18;;;7521:30;-1:-1:-1;;;7567:18:36;;;7560:47;7624:18;;2359:59:30::1;7307:341:36::0;2359:59:30::1;-1:-1:-1::0;;;;;2428:14:30;;::::1;;::::0;;;:7:::1;:14;::::0;;;;:33;;-1:-1:-1;;;;;;2428:33:30::1;::::0;;;::::1;;::::0;;2272:196::o;1831:101:10:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1143:186:1:-;1251:24;:22;:24::i;:::-;1285:37;1293:4;1299:7;;1308:13;1285:7;:37::i;:::-;1143:186;;;;:::o;3588:83::-;1094:13:10;:11;:13::i;:::-;3640:10:1::1;-1:-1:-1::0;;;;;3640:22:1::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;3890:133:::0;1094:13:10;:11;:13::i;:::-;3975:41:1::1;::::0;-1:-1:-1;;;3975:41:1;;-1:-1:-1;;;;;2990:32:36;;;3975:41:1::1;::::0;::::1;2972:51:36::0;3975:10:1::1;:24;::::0;::::1;::::0;2945:18:36;;3975:41:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3890:133:::0;:::o;3318:111::-;3387:35;;-1:-1:-1;;;3387:35:1;;3416:4;3387:35;;;2972:51:36;3361:7:1;;3387:10;-1:-1:-1;;;;;3387:20:1;;;;2945:18:36;;3387:35:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3380:42;;3318:111;:::o;4562:345:30:-;4684:10;4672:23;;;;:11;:23;;;;;;:28;;;;:70;;-1:-1:-1;4731:10:30;4719:23;;;;:11;:23;;;;;;4704:12;:38;4672:70;4651:158;;;;-1:-1:-1;;;4651:158:30;;8268:2:36;4651:158:30;;;8250:21:36;8307:2;8287:18;;;8280:30;8346:34;8326:18;;;8319:62;-1:-1:-1;;;8397:18:36;;;8390:39;8446:19;;4651:158:30;8066:405:36;4651:158:30;-1:-1:-1;;;;;4819:15:30;;;;;;:8;:15;;;;;;;;4835:10;4819:27;;;;;;;:37;;4850:6;;4819:15;:37;;4850:6;;4819:37;:::i;:::-;;;;-1:-1:-1;4866:34:30;;-1:-1:-1;;;;;;4866:18:30;;4885:6;4893;4866:18;:34::i;2474:105:1:-;2518:54;;-1:-1:-1;;;2518:54:1;;2566:4;2518:54;;;2972:51:36;2518:10:1;-1:-1:-1;;;;;2518:20:1;;;;2547:9;;2945:18:36;;2518:54:1;;;;;;;;;;;;;;;;;;;2081:198:10;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:10;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:10;;8811:2:36;2161:73:10::1;::::0;::::1;8793:21:36::0;8850:2;8830:18;;;8823:30;8889:34;8869:18;;;8862:62;-1:-1:-1;;;8940:18:36;;;8933:36;8986:19;;2161:73:10::1;8609:402:36::0;2161:73:10::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;632:290:1:-;764:20;786:22;821:24;:22;:24::i;:::-;862:53;887:6;895:10;907:7;862:24;:53::i;:::-;855:60;;;;632:290;;;;;;:::o;1359:130:10:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:10;719:10:24;1422:23:10;1414:68;;;;-1:-1:-1;;;1414:68:10;;9218:2:36;1414:68:10;;;9200:21:36;;;9237:18;;;9230:30;9296:34;9276:18;;;9269:62;9348:18;;1414:68:10;9016:356:36;974:241:20;1139:68;;-1:-1:-1;;;;;9635:15:36;;;1139:68:20;;;9617:34:36;9687:15;;9667:18;;;9660:43;9719:18;;;9712:34;;;1112:96:20;;1132:5;;-1:-1:-1;;;1162:27:20;9552:18:36;;1139:68:20;;;;-1:-1:-1;;1139:68:20;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:20;-1:-1:-1;;;;;;1139:68:20;;;;;;;;;;1112:19;:96::i;2433:187:10:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:10;;;-1:-1:-1;;;;;;2541:17:10;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;4087:135:1:-;4156:10;-1:-1:-1;;;;;4178:10:1;4156:33;;4148:67;;;;-1:-1:-1;;;4148:67:1;;9959:2:36;4148:67:1;;;9941:21:36;9998:2;9978:18;;;9971:30;-1:-1:-1;;;10017:18:36;;;10010:51;10078:18;;4148:67:1;9757:345:36;7346:830:30;7456:15;;;;;7564:65;;;;7575:7;7564:65;:::i;:::-;7455:174;;;;;;;;;;7698:23;7789:7;7774:12;7756:14;1775:5;7741:29;;;;:::i;:::-;7725:45;;:13;:45;:::i;:::-;7724:62;;;;:::i;:::-;:72;;;;:::i;:::-;7698:98;-1:-1:-1;7818:25:30;7810:4;:33;;;;;;;;:::i;:::-;;7806:311;;7902:63;-1:-1:-1;;;;;7902:22:30;;7925:7;7942:4;7949:15;7902:22;:63::i;:::-;7806:311;;;-1:-1:-1;;;;;8063:15:30;;;;;;;:8;:15;;;;;;;;:24;;;;;;;;;;;:43;;8091:15;;8063;:43;;8091:15;;8063:43;:::i;:::-;;;;-1:-1:-1;;7806:311:30;-1:-1:-1;;;;;8126:15:30;;;;;;:8;:15;;;;;8154;;8142:7;1247::10;1273:6;-1:-1:-1;;;;;1273:6:10;;1201:85;8142:7:30;-1:-1:-1;;;;;8126:24:30;-1:-1:-1;;;;;8126:24:30;;;;;;;;;;;;;:43;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;;;;;;7346:830:30:o;763:205:20:-;902:58;;-1:-1:-1;;;;;6612:32:36;;902:58:20;;;6594:51:36;6661:18;;;6654:34;;;875:86:20;;895:5;;-1:-1:-1;;;925:23:20;6567:18:36;;902:58:20;6404:290:36;5800:1135:30;5966:20;5988:22;1775:5;6159:6;:27;;;:42;6151:95;;;;-1:-1:-1;;;6151:95:30;;11753:2:36;6151:95:30;;;11735:21:36;11792:2;11772:18;;;11765:30;11831:34;11811:18;;;11804:62;-1:-1:-1;;;11882:18:36;;;11875:38;11930:19;;6151:95:30;11551:404:36;6151:95:30;6257:31;;6291:23;;;;:6;:23;:::i;:::-;6257:57;;-1:-1:-1;6257:57:30;-1:-1:-1;6359:7:30;6332:34;;6324:100;;;;-1:-1:-1;;;6324:100:30;;12688:2:36;6324:100:30;;;12670:21:36;12727:2;12707:18;;;12700:30;12766:34;12746:18;;;12739:62;-1:-1:-1;;;12817:18:36;;;12810:51;12878:19;;6324:100:30;12486:417:36;6324:100:30;6434:12;6472:21;:16;6489:2;6472:16;;:21;:::i;:::-;6464:30;;;:::i;:::-;6456:39;;;-1:-1:-1;1877:20:9;;6506:15:30;6575:34;6456:39;6601:7;6575:18;:34::i;:::-;6552:57;;6619:22;6644:17;:6;:15;:17::i;:::-;-1:-1:-1;;;;;6679:20:30;;;;;;:11;:20;;;;;;6619:42;;-1:-1:-1;6679:25:30;6671:74;;;;-1:-1:-1;;;6671:74:30;;13788:2:36;6671:74:30;;;13770:21:36;13827:2;13807:18;;;13800:30;13866:34;13846:18;;;13839:62;-1:-1:-1;;;13917:18:36;;;13910:34;13961:19;;6671:74:30;13586:400:36;6671:74:30;-1:-1:-1;;;;;6763:15:30;;;;;;;:8;:15;;;;;;;;:24;;;;;;;;;;:40;-1:-1:-1;6763:40:30;6755:86;;;;-1:-1:-1;;;6755:86:30;;14193:2:36;6755:86:30;;;14175:21:36;14232:2;14212:18;;;14205:30;14271:34;14251:18;;;14244:62;-1:-1:-1;;;14322:18:36;;;14315:31;14363:19;;6755:86:30;13991:397:36;6755:86:30;6859:65;;;-1:-1:-1;;;;;14723:15:36;;;6859:65:30;;;14705:34:36;14775:15;;;;14755:18;;;14748:43;14807:18;;;14800:34;14850:18;;;14843:34;14893:19;;;;14886:35;;;;6859:65:30;;;;;;;;;;14639:19:36;;;;6859:65:30;;-1:-1:-1;6859:65:30;;-1:-1:-1;;;6859:65:30;-1:-1:-1;;;;5800:1135:30:o;3747:706:20:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:20;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:20;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:20;;15416:2:36;4351:85:20;;;15398:21:36;15455:2;15435:18;;;15428:30;15494:34;15474:18;;;15467:62;-1:-1:-1;;;15545:18:36;;;15538:40;15595:19;;4351:85:20;15214:406:36;5169:332:30;-1:-1:-1;;;;;5348:14:30;;;5293:22;5348:14;;;:7;:14;;;;;;5293:22;;5348:14;;5372:69;;;;-1:-1:-1;;;5372:69:30;;15827:2:36;5372:69:30;;;15809:21:36;15866:2;15846:18;;;15839:30;15905:34;15885:18;;;15878:62;-1:-1:-1;;;15956:18:36;;;15949:33;15999:19;;5372:69:30;15625:399:36;5372:69:30;5458:36;;-1:-1:-1;;;5458:36:30;;;;;2350:25:36;;;-1:-1:-1;;;;;5458:25:30;;;;;2323:18:36;;5458:36:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5451:43;;;5169:332;;;;;:::o;2083:472:9:-;2155:7;2213:19;;;;2273:27;;;;2314:36;;;2310:161;;-1:-1:-1;2448:12:9;2083:472;-1:-1:-1;;2083:472:9:o;2310:161::-;2487:55;2491:12;2528:13;2505:20;:36;2487:3;:55::i;:::-;2480:62;2083:472;-1:-1:-1;;;;2083:472:9:o;3873:223:23:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;3639:104:9:-;3697:7;3727:1;3723;:5;:13;;3735:1;3723:13;;;3731:1;3723:13;3716:20;3639:104;-1:-1:-1;;;3639:104:9:o;4960:446:23:-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:23;;16231:2:36;5149:81:23;;;16213:21:36;16270:2;16250:18;;;16243:30;16309:34;16289:18;;;16282:62;-1:-1:-1;;;16360:18:36;;;16353:36;16406:19;;5149:81:23;16029:402:36;5149:81:23;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:23;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:23:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:23;;;7908:60;;;;-1:-1:-1;;;7908:60:23;;16930:2:36;7908:60:23;;;16912:21:36;16969:2;16949:18;;;16942:30;17008:31;16988:18;;;16981:59;17057:18;;7908:60:23;16728:353:36;7908:60:23;-1:-1:-1;8003:10:23;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:23;;;;;;;;:::i;14:276:36:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:10;223:5;219:22;212:5;209:33;199:61;;256:1;253;246:12;295:139;-1:-1:-1;;;;;378:31:36;;368:42;;358:70;;424:1;421;414:12;439:331;515:6;523;576:2;564:9;555:7;551:23;547:32;544:52;;;592:1;589;582:12;544:52;631:9;618:23;650:39;683:5;650:39;:::i;:::-;708:5;760:2;745:18;;;;732:32;;-1:-1:-1;;;439:331:36:o;775:487::-;867:6;875;883;936:2;924:9;915:7;911:23;907:32;904:52;;;952:1;949;942:12;904:52;991:9;978:23;1010:39;1043:5;1010:39;:::i;:::-;1068:5;-1:-1:-1;1125:2:36;1110:18;;1097:32;1138:41;1097:32;1138:41;:::i;:::-;775:487;;1198:7;;-1:-1:-1;;;1252:2:36;1237:18;;;;1224:32;;775:487::o;1267:419::-;1350:6;1358;1411:2;1399:9;1390:7;1386:23;1382:32;1379:52;;;1427:1;1424;1417:12;1379:52;1466:9;1453:23;1485:39;1518:5;1485:39;:::i;:::-;1543:5;-1:-1:-1;1600:2:36;1585:18;;1572:32;1613:41;1572:32;1613:41;:::i;:::-;1673:7;1663:17;;;1267:419;;;;;:::o;1944:255::-;2003:6;2056:2;2044:9;2035:7;2031:23;2027:32;2024:52;;;2072:1;2069;2062:12;2024:52;2111:9;2098:23;2130:39;2163:5;2130:39;:::i;3034:817::-;3136:6;3144;3152;3160;3213:2;3201:9;3192:7;3188:23;3184:32;3181:52;;;3229:1;3226;3219:12;3181:52;3268:9;3255:23;3307:1;3300:5;3297:12;3287:40;;3323:1;3320;3313:12;3287:40;3346:5;-1:-1:-1;3402:2:36;3387:18;;3374:32;3425:18;3455:14;;;3452:34;;;3482:1;3479;3472:12;3452:34;3520:6;3509:9;3505:22;3495:32;;3565:7;3558:4;3554:2;3550:13;3546:27;3536:55;;3587:1;3584;3577:12;3536:55;3627:2;3614:16;3653:2;3645:6;3642:14;3639:34;;;3669:1;3666;3659:12;3639:34;3714:7;3709:2;3700:6;3696:2;3692:15;3688:24;3685:37;3682:57;;;3735:1;3732;3725:12;3682:57;3034:817;;3766:2;3758:11;;;;;-1:-1:-1;3788:6:36;;3841:2;3826:18;3813:32;;-1:-1:-1;3034:817:36;-1:-1:-1;;;3034:817:36:o;4850:529::-;4960:6;4968;4976;5029:2;5017:9;5008:7;5004:23;5000:32;4997:52;;;5045:1;5042;5035:12;4997:52;5085:9;5072:23;5118:18;5110:6;5107:30;5104:50;;;5150:1;5147;5140:12;5104:50;5173:22;;5229:3;5211:16;;;5207:26;5204:46;;;5246:1;5243;5236:12;5204:46;5269:2;5318;5303:18;;5290:32;;-1:-1:-1;5369:2:36;5354:18;;;5341:32;;4850:529;-1:-1:-1;;;4850:529:36:o;5384:250::-;5469:1;5479:113;5493:6;5490:1;5487:13;5479:113;;;5569:11;;;5563:18;5550:11;;;5543:39;5515:2;5508:10;5479:113;;;-1:-1:-1;;5626:1:36;5608:16;;5601:27;5384:250::o;5639:270::-;5680:3;5718:5;5712:12;5745:6;5740:3;5733:19;5761:76;5830:6;5823:4;5818:3;5814:14;5807:4;5800:5;5796:16;5761:76;:::i;:::-;5891:2;5870:15;-1:-1:-1;;5866:29:36;5857:39;;;;5898:4;5853:50;;5639:270;-1:-1:-1;;5639:270:36:o;5914:288::-;6089:2;6078:9;6071:21;6052:4;6109:44;6149:2;6138:9;6134:18;6126:6;6109:44;:::i;:::-;6101:52;;6189:6;6184:2;6173:9;6169:18;6162:34;5914:288;;;;;:::o;7045:127::-;7106:10;7101:3;7097:20;7094:1;7087:31;7137:4;7134:1;7127:15;7161:4;7158:1;7151:15;7177:125;7242:9;;;7263:10;;;7260:36;;;7276:18;;:::i;7877:184::-;7947:6;8000:2;7988:9;7979:7;7975:23;7971:32;7968:52;;;8016:1;8013;8006:12;7968:52;-1:-1:-1;8039:16:36;;7877:184;-1:-1:-1;7877:184:36:o;8476:128::-;8543:9;;;8564:11;;;8561:37;;;8578:18;;:::i;10107:633::-;10225:6;10233;10241;10249;10257;10310:3;10298:9;10289:7;10285:23;10281:33;10278:53;;;10327:1;10324;10317:12;10278:53;10366:9;10353:23;10385:39;10418:5;10385:39;:::i;:::-;10443:5;-1:-1:-1;10500:2:36;10485:18;;10472:32;10513:41;10472:32;10513:41;:::i;:::-;10107:633;;10573:7;;-1:-1:-1;;;;10627:2:36;10612:18;;10599:32;;10678:2;10663:18;;10650:32;;10729:3;10714:19;;;10701:33;;-1:-1:-1;10107:633:36:o;10745:168::-;10818:9;;;10849;;10866:15;;;10860:22;;10846:37;10836:71;;10887:18;;:::i;10918:217::-;10958:1;10984;10974:132;;11028:10;11023:3;11019:20;11016:1;11009:31;11063:4;11060:1;11053:15;11091:4;11088:1;11081:15;10974:132;-1:-1:-1;11120:9:36;;10918:217::o;11140:127::-;11201:10;11196:3;11192:20;11189:1;11182:31;11232:4;11229:1;11222:15;11256:4;11253:1;11246:15;11960:521;12037:4;12043:6;12103:11;12090:25;12197:2;12193:7;12182:8;12166:14;12162:29;12158:43;12138:18;12134:68;12124:96;;12216:1;12213;12206:12;12124:96;12243:33;;12295:20;;;-1:-1:-1;12338:18:36;12327:30;;12324:50;;;12370:1;12367;12360:12;12324:50;12403:4;12391:17;;-1:-1:-1;12434:14:36;12430:27;;;12420:38;;12417:58;;;12471:1;12468;12461:12;12417:58;11960:521;;;;;:::o;12908:331::-;13013:9;13024;13066:8;13054:10;13051:24;13048:44;;;13088:1;13085;13078:12;13048:44;13117:6;13107:8;13104:20;13101:40;;;13137:1;13134;13127:12;13101:40;-1:-1:-1;;13163:23:36;;;13208:25;;;;;-1:-1:-1;12908:331:36:o;13244:337::-;-1:-1:-1;;13365:19:36;;13452:11;;;;13483:2;13475:11;;13472:103;;;13562:2;13556;13549:3;13545:2;13541:12;13538:1;13534:20;13530:29;13526:2;13522:38;13518:47;13509:56;;13472:103;;;13244:337;;;;:::o;14932:277::-;14999:6;15052:2;15040:9;15031:7;15027:23;15023:32;15020:52;;;15068:1;15065;15058:12;15020:52;15100:9;15094:16;15153:5;15146:13;15139:21;15132:5;15129:32;15119:60;;15175:1;15172;15165:12;16436:287;16565:3;16603:6;16597:13;16619:66;16678:6;16673:3;16666:4;16658:6;16654:17;16619:66;:::i;:::-;16701:16;;;;;16436:287;-1:-1:-1;;16436:287:36:o;17086:219::-;17235:2;17224:9;17217:21;17198:4;17255:44;17295:2;17284:9;17280:18;17272:6;17255:44;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "155": [
        {
          "start": 831,
          "length": 32
        },
        {
          "start": 1181,
          "length": 32
        },
        {
          "start": 1332,
          "length": 32
        },
        {
          "start": 1821,
          "length": 32
        },
        {
          "start": 1969,
          "length": 32
        },
        {
          "start": 2088,
          "length": 32
        },
        {
          "start": 2444,
          "length": 32
        },
        {
          "start": 2965,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "COST_OF_POST()": "796d4371",
    "addDepositFor(address,address,uint256)": "382edd9e",
    "addStake(uint32)": "0396cb60",
    "addToken(address,address)": "5476bd72",
    "balances(address,address)": "c23f001f",
    "deposit()": "d0e30db0",
    "depositInfo(address,address)": "493b0170",
    "entryPoint()": "b0d691fe",
    "getDeposit()": "c399ec88",
    "lockTokenDeposit()": "cd8f80c2",
    "oracles(address)": "addd5099",
    "owner()": "8da5cb5b",
    "postOp(uint8,bytes,uint256)": "a9a23409",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b",
    "unlockBlock(address)": "4a6f84cf",
    "unlockStake()": "bb9fe6bf",
    "unlockTokenDeposit()": "9ed0fb68",
    "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": "f465c77e",
    "withdrawStake(address)": "c23a5cea",
    "withdrawTo(address,uint256)": "205c2878",
    "withdrawTokensTo(address,address,uint256)": "cc9c837c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COST_OF_POST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addDepositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"tokenPriceOracle\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTokenDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokenDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addDepositFor(address,address,uint256)\":{\"params\":{\"account\":\"the account to deposit for.\",\"amount\":\"the amount of token to deposit.\",\"token\":\"the token to deposit.\"}},\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- the unstake delay for this paymaster. Can only be increased.\"}},\"depositInfo(address,address)\":{\"returns\":{\"_unlockBlock\":\"- the block height at which the deposit can be withdrawn.\",\"amount\":\"- the amount of given token deposited to the Paymaster.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}},\"withdrawTokensTo(address,address,uint256)\":{\"params\":{\"amount\":\"amount to withdraw\",\"target\":\"address to send to\",\"token\":\"the token deposit to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDepositFor(address,address,uint256)\":{\"notice\":\"deposit tokens that a specific account can use to pay for gas. The sender must first approve this paymaster to withdraw these tokens (they are only withdrawn in this method). Note depositing the tokens is equivalent to transferring them to the \\\"account\\\" - only the account can later  use them - either as gas, or using withdrawTo()\"},\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"addToken(address,address)\":{\"notice\":\"owner of the paymaster should add supported tokens\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"lockTokenDeposit()\":{\"notice\":\"lock the tokens deposited for this account so they can be used to pay for gas. after calling unlockTokenDeposit(), the account can't use this paymaster until the deposit is locked.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"unlockTokenDeposit()\":{\"notice\":\"unlock deposit, so that it can be withdrawn. can't be called in the same block as withdrawTo()\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"},\"withdrawTokensTo(address,address,uint256)\":{\"notice\":\"withdraw tokens. can only be called after unlock() is called in a previous block.\"}},\"notice\":\"A token-based paymaster that accepts token deposits The deposit is only a safeguard: the user pays with his token balance.  only if the user didn't approve() the paymaster, or if the token balance is not enough, the deposit will be used.  thus the required deposit is to cover just one method call. The deposit is locked for the current block: the user must issue unlockTokenDeposit() to be allowed to withdraw  (but can't use the deposit for this or further operations) paymasterAndData holds the paymaster address followed by the token address to use.This paymaster will be rejected by the standard rules of EIP4337, as it uses an external oracle. (the standard rules ban accessing data of an external contract) It can only be used if it is \\\"whitelisted\\\" by the bundler. (technically, it can be used by an \\\"oracle\\\" which returns a static value, without accessing any storage)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DepositPaymaster.sol\":\"DepositPaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@eth-infinitism/contracts/=lib/eth-infinitism/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-infinitism/=lib/eth-infinitism/contracts/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/eth-infinitism/contracts/core/BasePaymaster.sol\":{\"keccak256\":\"0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0\",\"dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq\"]},\"lib/eth-infinitism/contracts/core/Helpers.sol\":{\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746\",\"dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU\"]},\"lib/eth-infinitism/contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b\",\"dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP\"]},\"lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf\",\"dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd\"]},\"lib/eth-infinitism/contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2\",\"dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b\"]},\"lib/eth-infinitism/contracts/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8\",\"dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia\"]},\"lib/eth-infinitism/contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3\",\"dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ\"]},\"lib/eth-infinitism/contracts/interfaces/UserOperation.sol\":{\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c\",\"dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/DepositPaymaster.sol\":{\"keccak256\":\"0xc4b1e8bd44f6480bb134056675c7c53c8de0f75f1a3cdd2520f546001e7710b2\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://145baa4d9182107f996dc730563c402090cd040e370c3404b96d01a6dd5beda0\",\"dweb:/ipfs/QmP5vyEuda4bdYzkKeTUQeJ11AynyYYnoW9JAyZvhZDeUW\"]},\"src/interfaces/IOracle.sol\":{\"keccak256\":\"0x855dc30b18dd54bc8f172bbf806e200f303d53dc5d5f1779b470e6d35a2fdb02\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ff7f451f1ae916ce5c10c4cdba20d699fa153d1312f7a8a4231258a8d817093c\",\"dweb:/ipfs/QmSopw6VWRLvHeM9EdgK2KmN42zZStYSBHsj7mNyMX2c2U\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEntryPoint",
              "name": "_entryPoint",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COST_OF_POST",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addDepositFor"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "addStake"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "contract IOracle",
              "name": "tokenPriceOracle",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addToken"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balances",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "depositInfo",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_unlockBlock",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "entryPoint",
          "outputs": [
            {
              "internalType": "contract IEntryPoint",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lockTokenDeposit"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "oracles",
          "outputs": [
            {
              "internalType": "contract IOracle",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum IPaymaster.PostOpMode",
              "name": "mode",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "actualGasCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "postOp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "unlockBlock",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlockStake"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlockTokenDeposit"
        },
        {
          "inputs": [
            {
              "internalType": "struct UserOperation",
              "name": "userOp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maxCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "validatePaymasterUserOp",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validationData",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawStake"
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTo"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTokensTo"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addDepositFor(address,address,uint256)": {
            "params": {
              "account": "the account to deposit for.",
              "amount": "the amount of token to deposit.",
              "token": "the token to deposit."
            }
          },
          "addStake(uint32)": {
            "params": {
              "unstakeDelaySec": "- the unstake delay for this paymaster. Can only be increased."
            }
          },
          "depositInfo(address,address)": {
            "returns": {
              "_unlockBlock": "- the block height at which the deposit can be withdrawn.",
              "amount": "- the amount of given token deposited to the Paymaster."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "postOp(uint8,bytes,uint256)": {
            "params": {
              "actualGasCost": "- actual gas used so far (without this postOp call).",
              "context": "- the context value returned by validatePaymasterUserOp",
              "mode": "enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "params": {
              "maxCost": "the maximum cost of this transaction (based on maximum gas and gas price from userOp)",
              "userOp": "the user operation",
              "userOpHash": "hash of the user's request data."
            },
            "returns": {
              "context": "value to send to a postOp      zero length to signify postOp is not required.",
              "validationData": "signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."
            }
          },
          "withdrawStake(address)": {
            "params": {
              "withdrawAddress": "the address to send withdrawn value."
            }
          },
          "withdrawTo(address,uint256)": {
            "params": {
              "amount": "to withdraw",
              "withdrawAddress": "target to send to"
            }
          },
          "withdrawTokensTo(address,address,uint256)": {
            "params": {
              "amount": "amount to withdraw",
              "target": "address to send to",
              "token": "the token deposit to withdraw"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addDepositFor(address,address,uint256)": {
            "notice": "deposit tokens that a specific account can use to pay for gas. The sender must first approve this paymaster to withdraw these tokens (they are only withdrawn in this method). Note depositing the tokens is equivalent to transferring them to the \"account\" - only the account can later  use them - either as gas, or using withdrawTo()"
          },
          "addStake(uint32)": {
            "notice": "add stake for this paymaster. This method can also carry eth value to add to the current stake."
          },
          "addToken(address,address)": {
            "notice": "owner of the paymaster should add supported tokens"
          },
          "deposit()": {
            "notice": "add a deposit for this paymaster, used for paying for transaction fees"
          },
          "getDeposit()": {
            "notice": "return current paymaster's deposit on the entryPoint."
          },
          "lockTokenDeposit()": {
            "notice": "lock the tokens deposited for this account so they can be used to pay for gas. after calling unlockTokenDeposit(), the account can't use this paymaster until the deposit is locked."
          },
          "postOp(uint8,bytes,uint256)": {
            "notice": "post-operation handler. Must verify sender is the entryPoint"
          },
          "unlockStake()": {
            "notice": "unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
          },
          "unlockTokenDeposit()": {
            "notice": "unlock deposit, so that it can be withdrawn. can't be called in the same block as withdrawTo()"
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "notice": "payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
          },
          "withdrawStake(address)": {
            "notice": "withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
          },
          "withdrawTo(address,uint256)": {
            "notice": "withdraw value from the deposit"
          },
          "withdrawTokensTo(address,address,uint256)": {
            "notice": "withdraw tokens. can only be called after unlock() is called in a previous block."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/",
        ":@eth-infinitism/contracts/=lib/eth-infinitism/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-infinitism/=lib/eth-infinitism/contracts/",
        ":forge-std/=lib/forge-std/src/",
        ":foundry-devops/=lib/foundry-devops/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/DepositPaymaster.sol": "DepositPaymaster"
      },
      "libraries": {}
    },
    "sources": {
      "lib/eth-infinitism/contracts/core/BasePaymaster.sol": {
        "keccak256": "0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443",
        "urls": [
          "bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0",
          "dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/core/Helpers.sol": {
        "keccak256": "0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a",
        "urls": [
          "bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746",
          "dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IAggregator.sol": {
        "keccak256": "0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a",
        "urls": [
          "bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b",
          "dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol": {
        "keccak256": "0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8",
        "urls": [
          "bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf",
          "dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/INonceManager.sol": {
        "keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
        "urls": [
          "bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
          "dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IPaymaster.sol": {
        "keccak256": "0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456",
        "urls": [
          "bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8",
          "dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IStakeManager.sol": {
        "keccak256": "0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f",
        "urls": [
          "bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3",
          "dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ"
        ],
        "license": "GPL-3.0-only"
      },
      "lib/eth-infinitism/contracts/interfaces/UserOperation.sol": {
        "keccak256": "0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c",
        "urls": [
          "bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c",
          "dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN"
        ],
        "license": "GPL-3.0"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238",
        "urls": [
          "bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6",
          "dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
        "urls": [
          "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
          "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/DepositPaymaster.sol": {
        "keccak256": "0xc4b1e8bd44f6480bb134056675c7c53c8de0f75f1a3cdd2520f546001e7710b2",
        "urls": [
          "bzz-raw://145baa4d9182107f996dc730563c402090cd040e370c3404b96d01a6dd5beda0",
          "dweb:/ipfs/QmP5vyEuda4bdYzkKeTUQeJ11AynyYYnoW9JAyZvhZDeUW"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/IOracle.sol": {
        "keccak256": "0x855dc30b18dd54bc8f172bbf806e200f303d53dc5d5f1779b470e6d35a2fdb02",
        "urls": [
          "bzz-raw://ff7f451f1ae916ce5c10c4cdba20d699fa153d1312f7a8a4231258a8d817093c",
          "dweb:/ipfs/QmSopw6VWRLvHeM9EdgK2KmN42zZStYSBHsj7mNyMX2c2U"
        ],
        "license": "GPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/DepositPaymaster.sol",
    "id": 4731,
    "exportedSymbols": {
      "BasePaymaster": [
        361
      ],
      "DepositPaymaster": [
        4730
      ],
      "IERC20": [
        2077
      ],
      "IEntryPoint": [
        857
      ],
      "IOracle": [
        5852
      ],
      "SafeERC20": [
        2394
      ],
      "UserOperation": [
        1045
      ],
      "UserOperationLib": [
        1215
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:8143:30",
    "nodes": [
      {
        "id": 4259,
        "nodeType": "PragmaDirective",
        "src": "36:24:30",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 4261,
        "nodeType": "ImportDirective",
        "src": "99:70:30",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 2078,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4260,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2077,
              "src": "107:6:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4263,
        "nodeType": "ImportDirective",
        "src": "170:82:30",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 2395,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4262,
              "name": "SafeERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2394,
              "src": "178:9:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4265,
        "nodeType": "ImportDirective",
        "src": "253:88:30",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/interfaces/UserOperation.sol",
        "file": "@eth-infinitism/contracts/interfaces/UserOperation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 1216,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4264,
              "name": "UserOperationLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1215,
              "src": "261:16:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4267,
        "nodeType": "ImportDirective",
        "src": "342:79:30",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/core/BasePaymaster.sol",
        "file": "@eth-infinitism/contracts/core/BasePaymaster.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 362,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4266,
              "name": "BasePaymaster",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 361,
              "src": "350:13:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4269,
        "nodeType": "ImportDirective",
        "src": "422:49:30",
        "nodes": [],
        "absolutePath": "src/interfaces/IOracle.sol",
        "file": "./interfaces/IOracle.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 5853,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4268,
              "name": "IOracle",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5852,
              "src": "430:7:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4271,
        "nodeType": "ImportDirective",
        "src": "472:85:30",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/interfaces/UserOperation.sol",
        "file": "@eth-infinitism/contracts/interfaces/UserOperation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 1216,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4270,
              "name": "UserOperation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1045,
              "src": "480:13:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4273,
        "nodeType": "ImportDirective",
        "src": "558:81:30",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol",
        "file": "@eth-infinitism/contracts/interfaces/IEntryPoint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4731,
        "sourceUnit": 858,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4272,
              "name": "IEntryPoint",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 857,
              "src": "566:11:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4730,
        "nodeType": "ContractDefinition",
        "src": "1572:6606:30",
        "nodes": [
          {
            "id": 4280,
            "nodeType": "UsingForDirective",
            "src": "1621:41:30",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 4277,
              "name": "UserOperationLib",
              "nameLocations": [
                "1627:16:30"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1215,
              "src": "1627:16:30"
            },
            "typeName": {
              "id": 4279,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4278,
                "name": "UserOperation",
                "nameLocations": [
                  "1648:13:30"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1045,
                "src": "1648:13:30"
              },
              "referencedDeclaration": 1045,
              "src": "1648:13:30",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_UserOperation_$1045_storage_ptr",
                "typeString": "struct UserOperation"
              }
            }
          },
          {
            "id": 4284,
            "nodeType": "UsingForDirective",
            "src": "1667:27:30",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 4281,
              "name": "SafeERC20",
              "nameLocations": [
                "1673:9:30"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2394,
              "src": "1673:9:30"
            },
            "typeName": {
              "id": 4283,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4282,
                "name": "IERC20",
                "nameLocations": [
                  "1687:6:30"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2077,
                "src": "1687:6:30"
              },
              "referencedDeclaration": 2077,
              "src": "1687:6:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$2077",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "id": 4287,
            "nodeType": "VariableDeclaration",
            "src": "1736:44:30",
            "nodes": [],
            "constant": true,
            "functionSelector": "796d4371",
            "mutability": "constant",
            "name": "COST_OF_POST",
            "nameLocation": "1760:12:30",
            "scope": 4730,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4285,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1736:7:30",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3335303030",
              "id": 4286,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1775:5:30",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_35000_by_1",
                "typeString": "int_const 35000"
              },
              "value": "35000"
            },
            "visibility": "public"
          },
          {
            "id": 4296,
            "nodeType": "VariableDeclaration",
            "src": "1787:58:30",
            "nodes": [],
            "constant": true,
            "mutability": "constant",
            "name": "NULL_ORACLE",
            "nameLocation": "1812:11:30",
            "scope": 4730,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IOracle_$5852",
              "typeString": "contract IOracle"
            },
            "typeName": {
              "id": 4289,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4288,
                "name": "IOracle",
                "nameLocations": [
                  "1787:7:30"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 5852,
                "src": "1787:7:30"
              },
              "referencedDeclaration": 5852,
              "src": "1787:7:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IOracle_$5852",
                "typeString": "contract IOracle"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "hexValue": "30",
                      "id": 4293,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1842:1:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      }
                    ],
                    "id": 4292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "1834:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 4291,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1834:7:30",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 4294,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "nameLocations": [],
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "1834:10:30",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 4290,
                "name": "IOracle",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 5852,
                "src": "1826:7:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_IOracle_$5852_$",
                  "typeString": "type(contract IOracle)"
                }
              },
              "id": 4295,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1826:19:30",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IOracle_$5852",
                "typeString": "contract IOracle"
              }
            },
            "visibility": "private"
          },
          {
            "id": 4302,
            "nodeType": "VariableDeclaration",
            "src": "1851:41:30",
            "nodes": [],
            "constant": false,
            "functionSelector": "addd5099",
            "mutability": "mutable",
            "name": "oracles",
            "nameLocation": "1885:7:30",
            "scope": 4730,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
              "typeString": "mapping(contract IERC20 => contract IOracle)"
            },
            "typeName": {
              "id": 4301,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 4298,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4297,
                  "name": "IERC20",
                  "nameLocations": [
                    "1859:6:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2077,
                  "src": "1859:6:30"
                },
                "referencedDeclaration": 2077,
                "src": "1859:6:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$2077",
                  "typeString": "contract IERC20"
                }
              },
              "nodeType": "Mapping",
              "src": "1851:26:30",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
                "typeString": "mapping(contract IERC20 => contract IOracle)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 4300,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4299,
                  "name": "IOracle",
                  "nameLocations": [
                    "1869:7:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5852,
                  "src": "1869:7:30"
                },
                "referencedDeclaration": 5852,
                "src": "1869:7:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IOracle_$5852",
                  "typeString": "contract IOracle"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 4309,
            "nodeType": "VariableDeclaration",
            "src": "1898:62:30",
            "nodes": [],
            "constant": false,
            "functionSelector": "c23f001f",
            "mutability": "mutable",
            "name": "balances",
            "nameLocation": "1952:8:30",
            "scope": 4730,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
            },
            "typeName": {
              "id": 4308,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 4304,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 4303,
                  "name": "IERC20",
                  "nameLocations": [
                    "1906:6:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2077,
                  "src": "1906:6:30"
                },
                "referencedDeclaration": 2077,
                "src": "1906:6:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$2077",
                  "typeString": "contract IERC20"
                }
              },
              "nodeType": "Mapping",
              "src": "1898:46:30",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 4307,
                "keyName": "",
                "keyNameLocation": "-1:-1:-1",
                "keyType": {
                  "id": 4305,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1924:7:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1916:27:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueName": "",
                "valueNameLocation": "-1:-1:-1",
                "valueType": {
                  "id": 4306,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1935:7:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 4313,
            "nodeType": "VariableDeclaration",
            "src": "1966:46:30",
            "nodes": [],
            "constant": false,
            "functionSelector": "4a6f84cf",
            "mutability": "mutable",
            "name": "unlockBlock",
            "nameLocation": "2001:11:30",
            "scope": 4730,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 4312,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 4310,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1974:7:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1966:27:30",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 4311,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1985:7:30",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 4326,
            "nodeType": "FunctionDefinition",
            "src": "2019:173:30",
            "nodes": [],
            "body": {
              "id": 4325,
              "nodeType": "Block",
              "src": "2083:109:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 4322,
                      "name": "unlockTokenDeposit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4445,
                      "src": "2165:18:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 4323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2165:20:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4324,
                  "nodeType": "ExpressionStatement",
                  "src": "2165:20:30"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4319,
                    "name": "_entryPoint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4316,
                    "src": "2070:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$857",
                      "typeString": "contract IEntryPoint"
                    }
                  }
                ],
                "id": 4320,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4318,
                  "name": "BasePaymaster",
                  "nameLocations": [
                    "2056:13:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 361,
                  "src": "2056:13:30"
                },
                "nodeType": "ModifierInvocation",
                "src": "2056:26:30"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4317,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4316,
                  "mutability": "mutable",
                  "name": "_entryPoint",
                  "nameLocation": "2043:11:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4326,
                  "src": "2031:23:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IEntryPoint_$857",
                    "typeString": "contract IEntryPoint"
                  },
                  "typeName": {
                    "id": 4315,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4314,
                      "name": "IEntryPoint",
                      "nameLocations": [
                        "2031:11:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 857,
                      "src": "2031:11:30"
                    },
                    "referencedDeclaration": 857,
                    "src": "2031:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$857",
                      "typeString": "contract IEntryPoint"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2030:25:30"
            },
            "returnParameters": {
              "id": 4321,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2083:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4354,
            "nodeType": "FunctionDefinition",
            "src": "2272:196:30",
            "nodes": [],
            "body": {
              "id": 4353,
              "nodeType": "Block",
              "src": "2349:119:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_contract$_IOracle_$5852",
                          "typeString": "contract IOracle"
                        },
                        "id": 4343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 4339,
                            "name": "oracles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4302,
                            "src": "2367:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
                              "typeString": "mapping(contract IERC20 => contract IOracle)"
                            }
                          },
                          "id": 4341,
                          "indexExpression": {
                            "id": 4340,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4330,
                            "src": "2375:5:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2077",
                              "typeString": "contract IERC20"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2367:14:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4342,
                          "name": "NULL_ORACLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4296,
                          "src": "2385:11:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "src": "2367:29:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e20616c726561647920736574",
                        "id": 4344,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2398:19:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3f1933bd5ead9cc60725798c84c3187e65fc3fa59401c57f2eee69bc2353d104",
                          "typeString": "literal_string \"Token already set\""
                        },
                        "value": "Token already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3f1933bd5ead9cc60725798c84c3187e65fc3fa59401c57f2eee69bc2353d104",
                          "typeString": "literal_string \"Token already set\""
                        }
                      ],
                      "id": 4338,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2359:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4345,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2359:59:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4346,
                  "nodeType": "ExpressionStatement",
                  "src": "2359:59:30"
                },
                {
                  "expression": {
                    "id": 4351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4347,
                        "name": "oracles",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4302,
                        "src": "2428:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
                          "typeString": "mapping(contract IERC20 => contract IOracle)"
                        }
                      },
                      "id": 4349,
                      "indexExpression": {
                        "id": 4348,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4330,
                        "src": "2436:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2428:14:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOracle_$5852",
                        "typeString": "contract IOracle"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4350,
                      "name": "tokenPriceOracle",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4333,
                      "src": "2445:16:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOracle_$5852",
                        "typeString": "contract IOracle"
                      }
                    },
                    "src": "2428:33:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOracle_$5852",
                      "typeString": "contract IOracle"
                    }
                  },
                  "id": 4352,
                  "nodeType": "ExpressionStatement",
                  "src": "2428:33:30"
                }
              ]
            },
            "documentation": {
              "id": 4327,
              "nodeType": "StructuredDocumentation",
              "src": "2198:69:30",
              "text": " owner of the paymaster should add supported tokens"
            },
            "functionSelector": "5476bd72",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4336,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4335,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2339:9:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1247,
                  "src": "2339:9:30"
                },
                "nodeType": "ModifierInvocation",
                "src": "2339:9:30"
              }
            ],
            "name": "addToken",
            "nameLocation": "2281:8:30",
            "parameters": {
              "id": 4334,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4330,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "2297:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4354,
                  "src": "2290:12:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$2077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 4329,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4328,
                      "name": "IERC20",
                      "nameLocations": [
                        "2290:6:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2077,
                      "src": "2290:6:30"
                    },
                    "referencedDeclaration": 2077,
                    "src": "2290:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4333,
                  "mutability": "mutable",
                  "name": "tokenPriceOracle",
                  "nameLocation": "2312:16:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4354,
                  "src": "2304:24:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IOracle_$5852",
                    "typeString": "contract IOracle"
                  },
                  "typeName": {
                    "id": 4332,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4331,
                      "name": "IOracle",
                      "nameLocations": [
                        "2304:7:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5852,
                      "src": "2304:7:30"
                    },
                    "referencedDeclaration": 5852,
                    "src": "2304:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOracle_$5852",
                      "typeString": "contract IOracle"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2289:40:30"
            },
            "returnParameters": {
              "id": 4337,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2349:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4404,
            "nodeType": "FunctionDefinition",
            "src": "3002:401:30",
            "nodes": [],
            "body": {
              "id": 4403,
              "nodeType": "Block",
              "src": "3081:322:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4368,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3170:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4369,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3174:6:30",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3170:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4372,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3190:4:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DepositPaymaster_$4730",
                              "typeString": "contract DepositPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_DepositPaymaster_$4730",
                              "typeString": "contract DepositPaymaster"
                            }
                          ],
                          "id": 4371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3182:7:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4370,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3182:7:30",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4373,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3182:13:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4374,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4362,
                        "src": "3197:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4365,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4358,
                        "src": "3147:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 4367,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3153:16:30",
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2171,
                      "src": "3147:22:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2077_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2077_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 4375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3147:57:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4376,
                  "nodeType": "ExpressionStatement",
                  "src": "3147:57:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_contract$_IOracle_$5852",
                          "typeString": "contract IOracle"
                        },
                        "id": 4382,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 4378,
                            "name": "oracles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4302,
                            "src": "3222:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
                              "typeString": "mapping(contract IERC20 => contract IOracle)"
                            }
                          },
                          "id": 4380,
                          "indexExpression": {
                            "id": 4379,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4358,
                            "src": "3230:5:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2077",
                              "typeString": "contract IERC20"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3222:14:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 4381,
                          "name": "NULL_ORACLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4296,
                          "src": "3240:11:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "src": "3222:29:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "756e737570706f7274656420746f6b656e",
                        "id": 4383,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3253:19:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_507d798c5ad4be89d4f3da658d37b2094b23f09aca616c68bd08d2df2115802a",
                          "typeString": "literal_string \"unsupported token\""
                        },
                        "value": "unsupported token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_507d798c5ad4be89d4f3da658d37b2094b23f09aca616c68bd08d2df2115802a",
                          "typeString": "literal_string \"unsupported token\""
                        }
                      ],
                      "id": 4377,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3214:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4384,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3214:59:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4385,
                  "nodeType": "ExpressionStatement",
                  "src": "3214:59:30"
                },
                {
                  "expression": {
                    "id": 4392,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4386,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4309,
                          "src": "3283:8:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                          }
                        },
                        "id": 4389,
                        "indexExpression": {
                          "id": 4387,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4358,
                          "src": "3292:5:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$2077",
                            "typeString": "contract IERC20"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3283:15:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4390,
                      "indexExpression": {
                        "id": 4388,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4360,
                        "src": "3299:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3283:24:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 4391,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4362,
                      "src": "3311:6:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3283:34:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4393,
                  "nodeType": "ExpressionStatement",
                  "src": "3283:34:30"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4394,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3331:3:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4395,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3335:6:30",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3331:10:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 4396,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4360,
                      "src": "3345:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3331:21:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4402,
                  "nodeType": "IfStatement",
                  "src": "3327:70:30",
                  "trueBody": {
                    "id": 4401,
                    "nodeType": "Block",
                    "src": "3354:43:30",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 4398,
                            "name": "lockTokenDeposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4457,
                            "src": "3368:16:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 4399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3368:18:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4400,
                        "nodeType": "ExpressionStatement",
                        "src": "3368:18:30"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 4355,
              "nodeType": "StructuredDocumentation",
              "src": "2474:523:30",
              "text": " deposit tokens that a specific account can use to pay for gas.\n The sender must first approve this paymaster to withdraw these tokens (they are only withdrawn in this method).\n Note depositing the tokens is equivalent to transferring them to the \"account\" - only the account can later\n  use them - either as gas, or using withdrawTo()\n @param token the token to deposit.\n @param account the account to deposit for.\n @param amount the amount of token to deposit."
            },
            "functionSelector": "382edd9e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addDepositFor",
            "nameLocation": "3011:13:30",
            "parameters": {
              "id": 4363,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4358,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "3032:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4404,
                  "src": "3025:12:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$2077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 4357,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4356,
                      "name": "IERC20",
                      "nameLocations": [
                        "3025:6:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2077,
                      "src": "3025:6:30"
                    },
                    "referencedDeclaration": 2077,
                    "src": "3025:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4360,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3047:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4404,
                  "src": "3039:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4359,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3039:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4362,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3064:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4404,
                  "src": "3056:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4361,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3056:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3024:47:30"
            },
            "returnParameters": {
              "id": 4364,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3081:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4432,
            "nodeType": "FunctionDefinition",
            "src": "3589:206:30",
            "nodes": [],
            "body": {
              "id": 4431,
              "nodeType": "Block",
              "src": "3700:95:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4417,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4413,
                      "src": "3710:6:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4418,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4309,
                          "src": "3719:8:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                          }
                        },
                        "id": 4420,
                        "indexExpression": {
                          "id": 4419,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4408,
                          "src": "3728:5:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$2077",
                            "typeString": "contract IERC20"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3719:15:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4422,
                      "indexExpression": {
                        "id": 4421,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4410,
                        "src": "3735:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3719:24:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3710:33:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4424,
                  "nodeType": "ExpressionStatement",
                  "src": "3710:33:30"
                },
                {
                  "expression": {
                    "id": 4429,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4425,
                      "name": "_unlockBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4415,
                      "src": "3753:12:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 4426,
                        "name": "unlockBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4313,
                        "src": "3768:11:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4428,
                      "indexExpression": {
                        "id": 4427,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4410,
                        "src": "3780:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3768:20:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3753:35:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4430,
                  "nodeType": "ExpressionStatement",
                  "src": "3753:35:30"
                }
              ]
            },
            "documentation": {
              "id": 4405,
              "nodeType": "StructuredDocumentation",
              "src": "3409:175:30",
              "text": " @return amount - the amount of given token deposited to the Paymaster.\n @return _unlockBlock - the block height at which the deposit can be withdrawn."
            },
            "functionSelector": "493b0170",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositInfo",
            "nameLocation": "3598:11:30",
            "parameters": {
              "id": 4411,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4408,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "3617:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4432,
                  "src": "3610:12:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$2077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 4407,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4406,
                      "name": "IERC20",
                      "nameLocations": [
                        "3610:6:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2077,
                      "src": "3610:6:30"
                    },
                    "referencedDeclaration": 2077,
                    "src": "3610:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4410,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3632:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4432,
                  "src": "3624:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3624:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3609:31:30"
            },
            "returnParameters": {
              "id": 4416,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4413,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3670:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4432,
                  "src": "3662:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3662:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4415,
                  "mutability": "mutable",
                  "name": "_unlockBlock",
                  "nameLocation": "3686:12:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4432,
                  "src": "3678:20:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4414,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3678:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3661:38:30"
            },
            "scope": 4730,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4445,
            "nodeType": "FunctionDefinition",
            "src": "3926:92:30",
            "nodes": [],
            "body": {
              "id": 4444,
              "nodeType": "Block",
              "src": "3963:55:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4436,
                        "name": "unlockBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4313,
                        "src": "3973:11:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4439,
                      "indexExpression": {
                        "expression": {
                          "id": 4437,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3985:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4438,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3989:6:30",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3985:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3973:23:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 4440,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "3999:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 4441,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4005:6:30",
                      "memberName": "number",
                      "nodeType": "MemberAccess",
                      "src": "3999:12:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3973:38:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4443,
                  "nodeType": "ExpressionStatement",
                  "src": "3973:38:30"
                }
              ]
            },
            "documentation": {
              "id": 4433,
              "nodeType": "StructuredDocumentation",
              "src": "3801:120:30",
              "text": " unlock deposit, so that it can be withdrawn.\n can't be called in the same block as withdrawTo()"
            },
            "functionSelector": "9ed0fb68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unlockTokenDeposit",
            "nameLocation": "3935:18:30",
            "parameters": {
              "id": 4434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3953:2:30"
            },
            "returnParameters": {
              "id": 4435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3963:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4457,
            "nodeType": "FunctionDefinition",
            "src": "4235:79:30",
            "nodes": [],
            "body": {
              "id": 4456,
              "nodeType": "Block",
              "src": "4270:44:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4449,
                        "name": "unlockBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4313,
                        "src": "4280:11:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4452,
                      "indexExpression": {
                        "expression": {
                          "id": 4450,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4292:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4296:6:30",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4292:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4280:23:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 4453,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4306:1:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4280:27:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4455,
                  "nodeType": "ExpressionStatement",
                  "src": "4280:27:30"
                }
              ]
            },
            "documentation": {
              "id": 4446,
              "nodeType": "StructuredDocumentation",
              "src": "4024:206:30",
              "text": " lock the tokens deposited for this account so they can be used to pay for gas.\n after calling unlockTokenDeposit(), the account can't use this paymaster until the deposit is locked."
            },
            "functionSelector": "cd8f80c2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lockTokenDeposit",
            "nameLocation": "4244:16:30",
            "parameters": {
              "id": 4447,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4260:2:30"
            },
            "returnParameters": {
              "id": 4448,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4270:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4503,
            "nodeType": "FunctionDefinition",
            "src": "4562:345:30",
            "nodes": [],
            "body": {
              "id": 4502,
              "nodeType": "Block",
              "src": "4641:266:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 4469,
                              "name": "unlockBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4313,
                              "src": "4672:11:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 4472,
                            "indexExpression": {
                              "expression": {
                                "id": 4470,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4684:3:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4471,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4688:6:30",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4684:10:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4672:23:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4473,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4699:1:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4672:28:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4481,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 4475,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "4704:5:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 4476,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4710:6:30",
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "4704:12:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "baseExpression": {
                              "id": 4477,
                              "name": "unlockBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4313,
                              "src": "4719:11:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 4480,
                            "indexExpression": {
                              "expression": {
                                "id": 4478,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "4731:3:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4479,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4735:6:30",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4731:10:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4719:23:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4704:38:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4672:70:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a206d75737420756e6c6f636b546f6b656e4465706f736974",
                        "id": 4483,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4756:43:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_39f72ca416781d13cac1dfa31c4ffd74b13ab32dac2d833098871eacb9b639c6",
                          "typeString": "literal_string \"DepositPaymaster: must unlockTokenDeposit\""
                        },
                        "value": "DepositPaymaster: must unlockTokenDeposit"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_39f72ca416781d13cac1dfa31c4ffd74b13ab32dac2d833098871eacb9b639c6",
                          "typeString": "literal_string \"DepositPaymaster: must unlockTokenDeposit\""
                        }
                      ],
                      "id": 4468,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4651:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4651:158:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4485,
                  "nodeType": "ExpressionStatement",
                  "src": "4651:158:30"
                },
                {
                  "expression": {
                    "id": 4493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4486,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4309,
                          "src": "4819:8:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                          }
                        },
                        "id": 4490,
                        "indexExpression": {
                          "id": 4487,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4461,
                          "src": "4828:5:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$2077",
                            "typeString": "contract IERC20"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4819:15:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4491,
                      "indexExpression": {
                        "expression": {
                          "id": 4488,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4835:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4489,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4839:6:30",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4835:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4819:27:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 4492,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4465,
                      "src": "4850:6:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4819:37:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4494,
                  "nodeType": "ExpressionStatement",
                  "src": "4819:37:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4498,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4463,
                        "src": "4885:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4499,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4465,
                        "src": "4893:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4495,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4461,
                        "src": "4866:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 4497,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4872:12:30",
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2145,
                      "src": "4866:18:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2077_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2077_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 4500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4866:34:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4501,
                  "nodeType": "ExpressionStatement",
                  "src": "4866:34:30"
                }
              ]
            },
            "documentation": {
              "id": 4458,
              "nodeType": "StructuredDocumentation",
              "src": "4320:237:30",
              "text": " withdraw tokens.\n can only be called after unlock() is called in a previous block.\n @param token the token deposit to withdraw\n @param target address to send to\n @param amount amount to withdraw"
            },
            "functionSelector": "cc9c837c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawTokensTo",
            "nameLocation": "4571:16:30",
            "parameters": {
              "id": 4466,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4461,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4595:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4503,
                  "src": "4588:12:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$2077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 4460,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4459,
                      "name": "IERC20",
                      "nameLocations": [
                        "4588:6:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2077,
                      "src": "4588:6:30"
                    },
                    "referencedDeclaration": 2077,
                    "src": "4588:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4463,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "4610:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4503,
                  "src": "4602:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4462,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4602:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4465,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4626:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4503,
                  "src": "4618:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4464,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4618:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4587:46:30"
            },
            "returnParameters": {
              "id": 4467,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4641:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4534,
            "nodeType": "FunctionDefinition",
            "src": "5169:332:30",
            "nodes": [],
            "body": {
              "id": 4533,
              "nodeType": "Block",
              "src": "5321:180:30",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4516
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4516,
                      "mutability": "mutable",
                      "name": "oracle",
                      "nameLocation": "5339:6:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4533,
                      "src": "5331:14:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IOracle_$5852",
                        "typeString": "contract IOracle"
                      },
                      "typeName": {
                        "id": 4515,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4514,
                          "name": "IOracle",
                          "nameLocations": [
                            "5331:7:30"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5852,
                          "src": "5331:7:30"
                        },
                        "referencedDeclaration": 5852,
                        "src": "5331:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IOracle_$5852",
                          "typeString": "contract IOracle"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4520,
                  "initialValue": {
                    "baseExpression": {
                      "id": 4517,
                      "name": "oracles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4302,
                      "src": "5348:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_contract$_IOracle_$5852_$",
                        "typeString": "mapping(contract IERC20 => contract IOracle)"
                      }
                    },
                    "id": 4519,
                    "indexExpression": {
                      "id": 4518,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4507,
                      "src": "5356:5:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$2077",
                        "typeString": "contract IERC20"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5348:14:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IOracle_$5852",
                      "typeString": "contract IOracle"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5331:31:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_contract$_IOracle_$5852",
                          "typeString": "contract IOracle"
                        },
                        "id": 4524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4522,
                          "name": "oracle",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4516,
                          "src": "5380:6:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 4523,
                          "name": "NULL_ORACLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4296,
                          "src": "5390:11:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IOracle_$5852",
                            "typeString": "contract IOracle"
                          }
                        },
                        "src": "5380:21:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a20756e737570706f7274656420746f6b656e",
                        "id": 4525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5403:37:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e569da2fa5f3783d38b7d46ea8805ea326964f23a43e6933928eb417d8c0af24",
                          "typeString": "literal_string \"DepositPaymaster: unsupported token\""
                        },
                        "value": "DepositPaymaster: unsupported token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e569da2fa5f3783d38b7d46ea8805ea326964f23a43e6933928eb417d8c0af24",
                          "typeString": "literal_string \"DepositPaymaster: unsupported token\""
                        }
                      ],
                      "id": 4521,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5372:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5372:69:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4527,
                  "nodeType": "ExpressionStatement",
                  "src": "5372:69:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4530,
                        "name": "ethBought",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4509,
                        "src": "5484:9:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4528,
                        "name": "oracle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4516,
                        "src": "5458:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IOracle_$5852",
                          "typeString": "contract IOracle"
                        }
                      },
                      "id": 4529,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5465:18:30",
                      "memberName": "getTokenValueOfEth",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5851,
                      "src": "5458:25:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view external returns (uint256)"
                      }
                    },
                    "id": 4531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5458:36:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4513,
                  "id": 4532,
                  "nodeType": "Return",
                  "src": "5451:43:30"
                }
              ]
            },
            "documentation": {
              "id": 4504,
              "nodeType": "StructuredDocumentation",
              "src": "4913:251:30",
              "text": " translate the given eth value to token amount\n @param token the token to use\n @param ethBought the required eth value we want to \"buy\"\n @return requiredTokens the amount of tokens required to get this amount of eth"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenValueOfEth",
            "nameLocation": "5178:18:30",
            "parameters": {
              "id": 4510,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4507,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "5204:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4534,
                  "src": "5197:12:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$2077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 4506,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4505,
                      "name": "IERC20",
                      "nameLocations": [
                        "5197:6:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2077,
                      "src": "5197:6:30"
                    },
                    "referencedDeclaration": 2077,
                    "src": "5197:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4509,
                  "mutability": "mutable",
                  "name": "ethBought",
                  "nameLocation": "5219:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4534,
                  "src": "5211:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4508,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5211:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5196:33:30"
            },
            "returnParameters": {
              "id": 4513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4512,
                  "mutability": "mutable",
                  "name": "requiredTokens",
                  "nameLocation": "5301:14:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4534,
                  "src": "5293:22:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5293:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5292:24:30"
            },
            "scope": 4730,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4642,
            "nodeType": "FunctionDefinition",
            "src": "5800:1135:30",
            "nodes": [],
            "body": {
              "id": 4641,
              "nodeType": "Block",
              "src": "6016:919:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 4550,
                        "name": "userOpHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4540,
                        "src": "6027:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "id": 4551,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "6026:12:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4552,
                  "nodeType": "ExpressionStatement",
                  "src": "6026:12:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4554,
                            "name": "userOp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4538,
                            "src": "6159:6:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserOperation_$1045_calldata_ptr",
                              "typeString": "struct UserOperation calldata"
                            }
                          },
                          "id": 4555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6166:20:30",
                          "memberName": "verificationGasLimit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1034,
                          "src": "6159:27:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 4556,
                          "name": "COST_OF_POST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4287,
                          "src": "6189:12:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6159:42:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a2067617320746f6f206c6f7720666f7220706f73744f70",
                        "id": 4558,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6203:42:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_76d41b66bad7418bbd05cffc309786614b3ab738d27bb600ce96cb2a2e4ebccd",
                          "typeString": "literal_string \"DepositPaymaster: gas too low for postOp\""
                        },
                        "value": "DepositPaymaster: gas too low for postOp"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_76d41b66bad7418bbd05cffc309786614b3ab738d27bb600ce96cb2a2e4ebccd",
                          "typeString": "literal_string \"DepositPaymaster: gas too low for postOp\""
                        }
                      ],
                      "id": 4553,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6151:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6151:95:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4560,
                  "nodeType": "ExpressionStatement",
                  "src": "6151:95:30"
                },
                {
                  "assignments": [
                    4562
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4562,
                      "mutability": "mutable",
                      "name": "paymasterAndData",
                      "nameLocation": "6272:16:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4641,
                      "src": "6257:31:30",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 4561,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6257:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4565,
                  "initialValue": {
                    "expression": {
                      "id": 4563,
                      "name": "userOp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4538,
                      "src": "6291:6:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserOperation_$1045_calldata_ptr",
                        "typeString": "struct UserOperation calldata"
                      }
                    },
                    "id": 4564,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "6298:16:30",
                    "memberName": "paymasterAndData",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 1042,
                    "src": "6291:23:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6257:57:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4572,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4567,
                            "name": "paymasterAndData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4562,
                            "src": "6332:16:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 4568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6349:6:30",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6332:23:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_40_by_1",
                            "typeString": "int_const 40"
                          },
                          "id": 4571,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3230",
                            "id": 4569,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6359:2:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 4570,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6364:2:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "6359:7:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_40_by_1",
                            "typeString": "int_const 40"
                          }
                        },
                        "src": "6332:34:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a207061796d6173746572416e6444617461206d757374207370656369667920746f6b656e",
                        "id": 4573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6368:55:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_62c15554b125accdf17be4b76a8053ccc5e06e3a5ec8f67f1fc117698d9663a8",
                          "typeString": "literal_string \"DepositPaymaster: paymasterAndData must specify token\""
                        },
                        "value": "DepositPaymaster: paymasterAndData must specify token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_62c15554b125accdf17be4b76a8053ccc5e06e3a5ec8f67f1fc117698d9663a8",
                          "typeString": "literal_string \"DepositPaymaster: paymasterAndData must specify token\""
                        }
                      ],
                      "id": 4566,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6324:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4574,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6324:100:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4575,
                  "nodeType": "ExpressionStatement",
                  "src": "6324:100:30"
                },
                {
                  "assignments": [
                    4578
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4578,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "6441:5:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4641,
                      "src": "6434:12:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$2077",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 4577,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4576,
                          "name": "IERC20",
                          "nameLocations": [
                            "6434:6:30"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2077,
                          "src": "6434:6:30"
                        },
                        "referencedDeclaration": 2077,
                        "src": "6434:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4590,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 4584,
                                  "name": "paymasterAndData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4562,
                                  "src": "6472:16:30",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                    "typeString": "bytes calldata"
                                  }
                                },
                                "id": 4586,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexRangeAccess",
                                "src": "6472:21:30",
                                "startExpression": {
                                  "hexValue": "3230",
                                  "id": 4585,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6489:2:30",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_20_by_1",
                                    "typeString": "int_const 20"
                                  },
                                  "value": "20"
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_calldata_ptr_slice",
                                  "typeString": "bytes calldata slice"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_calldata_ptr_slice",
                                  "typeString": "bytes calldata slice"
                                }
                              ],
                              "id": 4583,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6464:7:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes20_$",
                                "typeString": "type(bytes20)"
                              },
                              "typeName": {
                                "id": 4582,
                                "name": "bytes20",
                                "nodeType": "ElementaryTypeName",
                                "src": "6464:7:30",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6464:30:30",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes20",
                              "typeString": "bytes20"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes20",
                              "typeString": "bytes20"
                            }
                          ],
                          "id": 4581,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6456:7:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4580,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6456:7:30",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4588,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6456:39:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4579,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2077,
                      "src": "6449:6:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$2077_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 4589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6449:47:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6434:62:30"
                },
                {
                  "assignments": [
                    4592
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4592,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "6514:7:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4641,
                      "src": "6506:15:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4591,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6506:7:30",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4596,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 4593,
                        "name": "userOp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4538,
                        "src": "6524:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserOperation_$1045_calldata_ptr",
                          "typeString": "struct UserOperation calldata"
                        }
                      },
                      "id": 4594,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6531:9:30",
                      "memberName": "getSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1067,
                      "src": "6524:16:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_UserOperation_$1045_calldata_ptr_$returns$_t_address_$attached_to$_t_struct$_UserOperation_$1045_calldata_ptr_$",
                        "typeString": "function (struct UserOperation calldata) pure returns (address)"
                      }
                    },
                    "id": 4595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6524:18:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6506:36:30"
                },
                {
                  "assignments": [
                    4598
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4598,
                      "mutability": "mutable",
                      "name": "maxTokenCost",
                      "nameLocation": "6560:12:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4641,
                      "src": "6552:20:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4597,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6552:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4603,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4600,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4578,
                        "src": "6594:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      {
                        "id": 4601,
                        "name": "maxCost",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4542,
                        "src": "6601:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4599,
                      "name": "getTokenValueOfEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4534,
                      "src": "6575:18:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_contract$_IERC20_$2077_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (contract IERC20,uint256) view returns (uint256)"
                      }
                    },
                    "id": 4602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6575:34:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6552:57:30"
                },
                {
                  "assignments": [
                    4605
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4605,
                      "mutability": "mutable",
                      "name": "gasPriceUserOp",
                      "nameLocation": "6627:14:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4641,
                      "src": "6619:22:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4604,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6619:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4609,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 4606,
                        "name": "userOp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4538,
                        "src": "6644:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserOperation_$1045_calldata_ptr",
                          "typeString": "struct UserOperation calldata"
                        }
                      },
                      "id": 4607,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6651:8:30",
                      "memberName": "gasPrice",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1102,
                      "src": "6644:15:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_UserOperation_$1045_calldata_ptr_$returns$_t_uint256_$attached_to$_t_struct$_UserOperation_$1045_calldata_ptr_$",
                        "typeString": "function (struct UserOperation calldata) view returns (uint256)"
                      }
                    },
                    "id": 4608,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6644:17:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6619:42:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 4611,
                            "name": "unlockBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4313,
                            "src": "6679:11:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 4613,
                          "indexExpression": {
                            "id": 4612,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4592,
                            "src": "6691:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6679:20:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6703:1:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6679:25:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a206465706f736974206e6f74206c6f636b6564",
                        "id": 4616,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6706:38:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8eb29d3c5347f8cc0d88d4fc40deca72135020a232f7dd523594048d7ddf01b7",
                          "typeString": "literal_string \"DepositPaymaster: deposit not locked\""
                        },
                        "value": "DepositPaymaster: deposit not locked"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8eb29d3c5347f8cc0d88d4fc40deca72135020a232f7dd523594048d7ddf01b7",
                          "typeString": "literal_string \"DepositPaymaster: deposit not locked\""
                        }
                      ],
                      "id": 4610,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6671:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6671:74:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4618,
                  "nodeType": "ExpressionStatement",
                  "src": "6671:74:30"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 4620,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4309,
                              "src": "6763:8:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                              }
                            },
                            "id": 4622,
                            "indexExpression": {
                              "id": 4621,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4578,
                              "src": "6772:5:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$2077",
                                "typeString": "contract IERC20"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6763:15:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 4624,
                          "indexExpression": {
                            "id": 4623,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4592,
                            "src": "6779:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6763:24:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 4625,
                          "name": "maxTokenCost",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4598,
                          "src": "6791:12:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6763:40:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4465706f7369745061796d61737465723a206465706f73697420746f6f206c6f77",
                        "id": 4627,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6805:35:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fb4c3d014ab3213f2f61de4b888c6734ded30a222c61472057f0ad11219307bb",
                          "typeString": "literal_string \"DepositPaymaster: deposit too low\""
                        },
                        "value": "DepositPaymaster: deposit too low"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fb4c3d014ab3213f2f61de4b888c6734ded30a222c61472057f0ad11219307bb",
                          "typeString": "literal_string \"DepositPaymaster: deposit too low\""
                        }
                      ],
                      "id": 4619,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6755:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4628,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6755:86:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4629,
                  "nodeType": "ExpressionStatement",
                  "src": "6755:86:30"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "arguments": [
                          {
                            "id": 4632,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4592,
                            "src": "6870:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 4633,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4578,
                            "src": "6879:5:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2077",
                              "typeString": "contract IERC20"
                            }
                          },
                          {
                            "id": 4634,
                            "name": "gasPriceUserOp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4605,
                            "src": "6886:14:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 4635,
                            "name": "maxTokenCost",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4598,
                            "src": "6902:12:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 4636,
                            "name": "maxCost",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4542,
                            "src": "6916:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_contract$_IERC20_$2077",
                              "typeString": "contract IERC20"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 4630,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "6859:3:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 4631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "6863:6:30",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "6859:10:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 4637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6859:65:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 4638,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6926:1:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 4639,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "6858:70:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_rational_0_by_1_$",
                      "typeString": "tuple(bytes memory,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 4549,
                  "id": 4640,
                  "nodeType": "Return",
                  "src": "6851:77:30"
                }
              ]
            },
            "baseFunctions": [
              206
            ],
            "documentation": {
              "id": 4535,
              "nodeType": "StructuredDocumentation",
              "src": "5507:288:30",
              "text": " Validate the request:\n The sender should have enough deposit to pay the max possible cost.\n Note that the sender's balance is not checked. If it fails to pay from its balance,\n this deposit will be used to compensate the paymaster for the transaction."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validatePaymasterUserOp",
            "nameLocation": "5809:24:30",
            "overrides": {
              "id": 4544,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5940:8:30"
            },
            "parameters": {
              "id": 4543,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4538,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "5857:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4642,
                  "src": "5834:29:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$1045_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 4537,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4536,
                      "name": "UserOperation",
                      "nameLocations": [
                        "5834:13:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1045,
                      "src": "5834:13:30"
                    },
                    "referencedDeclaration": 1045,
                    "src": "5834:13:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$1045_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4540,
                  "mutability": "mutable",
                  "name": "userOpHash",
                  "nameLocation": "5873:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4642,
                  "src": "5865:18:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4539,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5865:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4542,
                  "mutability": "mutable",
                  "name": "maxCost",
                  "nameLocation": "5893:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4642,
                  "src": "5885:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4541,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5885:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5833:68:30"
            },
            "returnParameters": {
              "id": 4549,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4546,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "5979:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4642,
                  "src": "5966:20:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4545,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5966:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4548,
                  "mutability": "mutable",
                  "name": "validationData",
                  "nameLocation": "5996:14:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4642,
                  "src": "5988:22:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4547,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5988:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5965:46:30"
            },
            "scope": 4730,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 4729,
            "nodeType": "FunctionDefinition",
            "src": "7346:830:30",
            "nodes": [],
            "body": {
              "id": 4728,
              "nodeType": "Block",
              "src": "7445:731:30",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4655,
                    4658,
                    4660,
                    4662,
                    4664
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4655,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "7464:7:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7456:15:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4654,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7456:7:30",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 4658,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "7480:5:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7473:12:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$2077",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 4657,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4656,
                          "name": "IERC20",
                          "nameLocations": [
                            "7473:6:30"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2077,
                          "src": "7473:6:30"
                        },
                        "referencedDeclaration": 2077,
                        "src": "7473:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2077",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 4660,
                      "mutability": "mutable",
                      "name": "gasPricePostOp",
                      "nameLocation": "7495:14:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7487:22:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4659,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7487:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 4662,
                      "mutability": "mutable",
                      "name": "maxTokenCost",
                      "nameLocation": "7519:12:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7511:20:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4661,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7511:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 4664,
                      "mutability": "mutable",
                      "name": "maxCost",
                      "nameLocation": "7541:7:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7533:15:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4663,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7533:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4679,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4667,
                        "name": "context",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4648,
                        "src": "7575:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 4669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7585:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4668,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7585:7:30",
                              "typeDescriptions": {}
                            }
                          },
                          {
                            "id": 4670,
                            "name": "IERC20",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2077,
                            "src": "7594:6:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IERC20_$2077_$",
                              "typeString": "type(contract IERC20)"
                            }
                          },
                          {
                            "id": 4672,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7602:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 4671,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7602:7:30",
                              "typeDescriptions": {}
                            }
                          },
                          {
                            "id": 4674,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7611:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 4673,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7611:7:30",
                              "typeDescriptions": {}
                            }
                          },
                          {
                            "id": 4676,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7620:7:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 4675,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7620:7:30",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 4677,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7584:44:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_type$_t_address_$_$_t_type$_t_contract$_IERC20_$2077_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(address),type(contract IERC20),type(uint256),type(uint256),type(uint256))"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_tuple$_t_type$_t_address_$_$_t_type$_t_contract$_IERC20_$2077_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(address),type(contract IERC20),type(uint256),type(uint256),type(uint256))"
                        }
                      ],
                      "expression": {
                        "id": 4665,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "7564:3:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 4666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "7568:6:30",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "7564:10:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 4678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7564:65:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_payable_$_t_contract$_IERC20_$2077_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(address payable,contract IERC20,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7455:174:30"
                },
                {
                  "assignments": [
                    4681
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4681,
                      "mutability": "mutable",
                      "name": "actualTokenCost",
                      "nameLocation": "7706:15:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 4728,
                      "src": "7698:23:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4680,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7698:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4692,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4686,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 4682,
                              "name": "actualGasCost",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4650,
                              "src": "7725:13:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4685,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 4683,
                                "name": "COST_OF_POST",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4287,
                                "src": "7741:12:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "id": 4684,
                                "name": "gasPricePostOp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4660,
                                "src": "7756:14:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7741:29:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "7725:45:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 4687,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7724:47:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "id": 4688,
                        "name": "maxTokenCost",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4662,
                        "src": "7774:12:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7724:62:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "id": 4690,
                      "name": "maxCost",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4664,
                      "src": "7789:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7724:72:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7698:98:30"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_PostOpMode_$884",
                      "typeString": "enum IPaymaster.PostOpMode"
                    },
                    "id": 4696,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4693,
                      "name": "mode",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4646,
                      "src": "7810:4:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_PostOpMode_$884",
                        "typeString": "enum IPaymaster.PostOpMode"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "expression": {
                        "id": 4694,
                        "name": "PostOpMode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "7818:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_PostOpMode_$884_$",
                          "typeString": "type(enum IPaymaster.PostOpMode)"
                        }
                      },
                      "id": 4695,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "7829:14:30",
                      "memberName": "postOpReverted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 883,
                      "src": "7818:25:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_PostOpMode_$884",
                        "typeString": "enum IPaymaster.PostOpMode"
                      }
                    },
                    "src": "7810:33:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4717,
                    "nodeType": "Block",
                    "src": "7982:135:30",
                    "statements": [
                      {
                        "expression": {
                          "id": 4715,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 4709,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4309,
                                "src": "8063:8:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                                }
                              },
                              "id": 4712,
                              "indexExpression": {
                                "id": 4710,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4658,
                                "src": "8072:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$2077",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8063:15:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 4713,
                            "indexExpression": {
                              "id": 4711,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4655,
                              "src": "8079:7:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "8063:24:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 4714,
                            "name": "actualTokenCost",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4681,
                            "src": "8091:15:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8063:43:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4716,
                        "nodeType": "ExpressionStatement",
                        "src": "8063:43:30"
                      }
                    ]
                  },
                  "id": 4718,
                  "nodeType": "IfStatement",
                  "src": "7806:311:30",
                  "trueBody": {
                    "id": 4708,
                    "nodeType": "Block",
                    "src": "7845:131:30",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4700,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4655,
                              "src": "7925:7:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 4703,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "7942:4:30",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_DepositPaymaster_$4730",
                                    "typeString": "contract DepositPaymaster"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_DepositPaymaster_$4730",
                                    "typeString": "contract DepositPaymaster"
                                  }
                                ],
                                "id": 4702,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7934:7:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 4701,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7934:7:30",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4704,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7934:13:30",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 4705,
                              "name": "actualTokenCost",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4681,
                              "src": "7949:15:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 4697,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4658,
                              "src": "7902:5:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$2077",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 4699,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7908:16:30",
                            "memberName": "safeTransferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2171,
                            "src": "7902:22:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2077_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2077_$",
                              "typeString": "function (contract IERC20,address,address,uint256)"
                            }
                          },
                          "id": 4706,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7902:63:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4707,
                        "nodeType": "ExpressionStatement",
                        "src": "7902:63:30"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 4726,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4719,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4309,
                          "src": "8126:8:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_contract$_IERC20_$2077_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(contract IERC20 => mapping(address => uint256))"
                          }
                        },
                        "id": 4723,
                        "indexExpression": {
                          "id": 4720,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4658,
                          "src": "8135:5:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$2077",
                            "typeString": "contract IERC20"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8126:15:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4724,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4721,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1256,
                          "src": "8142:5:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 4722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8142:7:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8126:24:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 4725,
                      "name": "actualTokenCost",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4681,
                      "src": "8154:15:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8126:43:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4727,
                  "nodeType": "ExpressionStatement",
                  "src": "8126:43:30"
                }
              ]
            },
            "baseFunctions": [
              249
            ],
            "documentation": {
              "id": 4643,
              "nodeType": "StructuredDocumentation",
              "src": "6941:400:30",
              "text": " perform the post-operation to charge the sender for the gas.\n in normal mode, use transferFrom to withdraw enough tokens from the sender's balance.\n in case the transferFrom fails, the _postOp reverts and the entryPoint will call it again,\n this time in *postOpReverted* mode.\n In this mode, we use the deposit to pay (which we validated to be large enough)"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_postOp",
            "nameLocation": "7355:7:30",
            "overrides": {
              "id": 4652,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7436:8:30"
            },
            "parameters": {
              "id": 4651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4646,
                  "mutability": "mutable",
                  "name": "mode",
                  "nameLocation": "7374:4:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4729,
                  "src": "7363:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PostOpMode_$884",
                    "typeString": "enum IPaymaster.PostOpMode"
                  },
                  "typeName": {
                    "id": 4645,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4644,
                      "name": "PostOpMode",
                      "nameLocations": [
                        "7363:10:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 884,
                      "src": "7363:10:30"
                    },
                    "referencedDeclaration": 884,
                    "src": "7363:10:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PostOpMode_$884",
                      "typeString": "enum IPaymaster.PostOpMode"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4648,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "7395:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4729,
                  "src": "7380:22:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4647,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7380:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4650,
                  "mutability": "mutable",
                  "name": "actualGasCost",
                  "nameLocation": "7412:13:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4729,
                  "src": "7404:21:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4649,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7404:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7362:64:30"
            },
            "returnParameters": {
              "id": 4653,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7445:0:30"
            },
            "scope": 4730,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4275,
              "name": "BasePaymaster",
              "nameLocations": [
                "1601:13:30"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 361,
              "src": "1601:13:30"
            },
            "id": 4276,
            "nodeType": "InheritanceSpecifier",
            "src": "1601:13:30"
          }
        ],
        "canonicalName": "DepositPaymaster",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4274,
          "nodeType": "StructuredDocumentation",
          "src": "640:930:30",
          "text": " A token-based paymaster that accepts token deposits\n The deposit is only a safeguard: the user pays with his token balance.\n  only if the user didn't approve() the paymaster, or if the token balance is not enough, the deposit will be used.\n  thus the required deposit is to cover just one method call.\n The deposit is locked for the current block: the user must issue unlockTokenDeposit() to be allowed to withdraw\n  (but can't use the deposit for this or further operations)\n paymasterAndData holds the paymaster address followed by the token address to use.\n @notice This paymaster will be rejected by the standard rules of EIP4337, as it uses an external oracle.\n (the standard rules ban accessing data of an external contract)\n It can only be used if it is \"whitelisted\" by the bundler.\n (technically, it can be used by an \"oracle\" which returns a static value, without accessing any storage)"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4730,
          361,
          1328,
          2784,
          911
        ],
        "name": "DepositPaymaster",
        "nameLocation": "1581:16:30",
        "scope": 4731,
        "usedErrors": [],
        "usedEvents": [
          1229
        ]
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 30
}