{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COST_OF_POST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPaymaster.PostOpMode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "theFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCost",
          "type": "uint256"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60c06040523480156200001157600080fd5b5060405162001c3538038062001c35833981016040819052620000349162000327565b8180826200004233620000a0565b6001600160a01b031660805260046200005c8382620004b2565b5060056200006b8282620004b2565b5050506001600160a01b03831660a05262000088306001620000f0565b620000973033600019620001b9565b505050620005a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200014c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600360008282546200016091906200057e565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0383166200021d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000143565b6001600160a01b038216620002805760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000143565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b505050565b6001600160a01b0381168114620002fc57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80516200032281620002e6565b919050565b6000806000606084860312156200033d57600080fd5b83516200034a81620002e6565b602085810151919450906001600160401b03808211156200036a57600080fd5b818701915087601f8301126200037f57600080fd5b815181811115620003945762000394620002ff565b604051601f8201601f19908116603f01168101908382118183101715620003bf57620003bf620002ff565b816040528281528a86848701011115620003d857600080fd5b600093505b82841015620003fc5784840186015181850187015292850192620003dd565b60008684830101528097505050505050506200041b6040850162000315565b90509250925092565b600181811c908216806200043957607f821691505b6020821081036200045a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002e157600081815260208120601f850160051c81016020861015620004895750805b601f850160051c820191505b81811015620004aa5782815560010162000495565b505050505050565b81516001600160401b03811115620004ce57620004ce620002ff565b620004e681620004df845462000424565b8462000460565b602080601f8311600181146200051e5760008415620005055750858301515b600019600386901b1c1916600185901b178555620004aa565b600085815260208120601f198616915b828110156200054f578886015182559484019460019091019084016200052e565b50858210156200056e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620005a057634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a051611631620006046000396000818161034b01526111d90152600081816103df0152818161050301528181610646015281816107a501528181610839015281816108b00152818161093d0152610e2401526116316000f3fe6080604052600436106101815760003560e01c80639f5ca221116100d1578063c23a5cea1161008a578063dd62ed3e11610064578063dd62ed3e14610453578063f0dda65c14610473578063f2fde38b14610493578063f465c77e146104b357600080fd5b8063c23a5cea14610416578063c399ec8814610436578063d0e30db01461044b57600080fd5b80639f5ca22114610339578063a457c2d71461036d578063a9059cbb1461038d578063a9a23409146103ad578063b0d691fe146103cd578063bb9fe6bf1461040157600080fd5b8063313ce5671161013e578063715018a611610118578063715018a6146102c7578063796d4371146102dc5780638da5cb5b146102f257806395d89b411461032457600080fd5b8063313ce56714610255578063395093511461027157806370a082311461029157600080fd5b80630396cb601461018657806306fdde031461019b578063095ea7b3146101c657806318160ddd146101f6578063205c28781461021557806323b872dd14610235575b600080fd5b610199610194366004611255565b6104e1565b005b3480156101a757600080fd5b506101b061056c565b6040516101bd91906112c8565b60405180910390f35b3480156101d257600080fd5b506101e66101e13660046112f0565b6105fe565b60405190151581526020016101bd565b34801561020257600080fd5b506003545b6040519081526020016101bd565b34801561022157600080fd5b506101996102303660046112f0565b610618565b34801561024157600080fd5b506101e661025036600461131c565b61068a565b34801561026157600080fd5b50604051601281526020016101bd565b34801561027d57600080fd5b506101e661028c3660046112f0565b6106ae565b34801561029d57600080fd5b506102076102ac36600461135d565b6001600160a01b031660009081526001602052604090205490565b3480156102d357600080fd5b506101996106d0565b3480156102e857600080fd5b50610207613a9881565b3480156102fe57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b34801561033057600080fd5b506101b06106e4565b34801561034557600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037957600080fd5b506101e66103883660046112f0565b6106f3565b34801561039957600080fd5b506101e66103a83660046112f0565b610773565b3480156103b957600080fd5b506101996103c836600461137a565b610781565b3480156103d957600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061019961079b565b34801561042257600080fd5b5061019961043136600461135d565b610812565b34801561044257600080fd5b50610207610898565b610199610928565b34801561045f57600080fd5b5061020761046e366004611409565b61098a565b34801561047f57600080fd5b5061019961048e3660046112f0565b6109b5565b34801561049f57600080fd5b506101996104ae36600461135d565b6109cb565b3480156104bf57600080fd5b506104d36104ce366004611442565b610a09565b6040516101bd929190611496565b6104e9610a2c565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050505050565b60606004805461057b906114b8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906114b8565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b60003361060c818585610a86565b60019150505b92915050565b610620610a2c565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561055057600080fd5b600033610698858285610baa565b6106a3858585610c1e565b506001949350505050565b60003361060c8185856106c1838361098a565b6106cb91906114f2565b610a86565b6106d8610a2c565b6106e26000610dc9565b565b60606005805461057b906114b8565b60003381610701828661098a565b9050838110156107665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6106a38286868403610a86565b60003361060c818585610c1e565b610789610e19565b61079584848484610e89565b50505050565b6107a3610a2c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107fe57600080fd5b505af1158015610795573d6000803e3d6000fd5b61081a610a2c565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611513565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561087d57600080fd5b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6109bd610a2c565b6109c78282610ebc565b5050565b6109d3610a2c565b6109f0306109e96000546001600160a01b031690565b6000610a86565b6109f981610f7d565b610a063082600019610a86565b50565b60606000610a15610e19565b610a20858585610ff3565b91509150935093915050565b6000546001600160a01b031633146106e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075d565b6001600160a01b038316610ae85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161075d565b6001600160a01b038216610b495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161075d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610bb6848461098a565b905060001981146107955781811015610c115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161075d565b6107958484848403610a86565b6001600160a01b038316610c825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161075d565b6001600160a01b038216610ce45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161075d565b6001600160a01b03831660009081526001602052604090205481811015610d5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161075d565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610dbc9086815260200190565b60405180910390a3610795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e25760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161075d565b6000610e978385018561135d565b90506000610eaf610eaa613a98856114f2565b611196565b9050610564823083610c1e565b6001600160a01b038216610f125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161075d565b8060036000828254610f2491906114f2565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b610f85610a2c565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075d565b610a0681610dc9565b606060008061100184611196565b9050613a988660a00135116110675760405162461bcd60e51b815260206004820152602660248201527f546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f72206044820152650706f73744f760d41b606482015260840161075d565b611074604087018761152c565b1590506110f857611084866111a3565b806110956102ac602089018961135d565b10156110f35760405162461bcd60e51b815260206004820152602760248201527f546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d6044820152666372656174652960c81b606482015260840161075d565b611157565b806111096102ac602089018961135d565b10156111575760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e5061796d61737465723a206e6f2062616c616e6365000000000000604482015260640161075d565b611164602087018761135d565b604080516001600160a01b0390921660208301520160408051601f198184030181529190529660009650945050505050565b600061061260648361157a565b60006111b2604083018361152c565b6111c19160149160009161159c565b6111ca916115c6565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146109c75760405162461bcd60e51b815260206004820152602560248201527f546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666160448201526463746f727960d81b606482015260840161075d565b60006020828403121561126757600080fd5b813563ffffffff8116811461127b57600080fd5b9392505050565b6000815180845260005b818110156112a85760208185018101518683018201520161128c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061127b6020830184611282565b6001600160a01b0381168114610a0657600080fd5b6000806040838503121561130357600080fd5b823561130e816112db565b946020939093013593505050565b60008060006060848603121561133157600080fd5b833561133c816112db565b9250602084013561134c816112db565b929592945050506040919091013590565b60006020828403121561136f57600080fd5b813561127b816112db565b6000806000806060858703121561139057600080fd5b84356003811061139f57600080fd5b9350602085013567ffffffffffffffff808211156113bc57600080fd5b818701915087601f8301126113d057600080fd5b8135818111156113df57600080fd5b8860208285010111156113f157600080fd5b95986020929092019750949560400135945092505050565b6000806040838503121561141c57600080fd5b8235611427816112db565b91506020830135611437816112db565b809150509250929050565b60008060006060848603121561145757600080fd5b833567ffffffffffffffff81111561146e57600080fd5b8401610160818703121561148157600080fd5b95602085013595506040909401359392505050565b6040815260006114a96040830185611282565b90508260208301529392505050565b600181811c908216806114cc57607f821691505b6020821081036114ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561061257634e487b7160e01b600052601160045260246000fd5b60006020828403121561152557600080fd5b5051919050565b6000808335601e1984360301811261154357600080fd5b83018035915067ffffffffffffffff82111561155e57600080fd5b60200191503681900382131561157357600080fd5b9250929050565b60008261159757634e487b7160e01b600052601260045260246000fd5b500490565b600080858511156115ac57600080fd5b838611156115b957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115f35780818660140360031b1b83161692505b50509291505056fea26469706673582212208d2f358dbf5adf0926797ce1a9f0875dbef2903fe14e491b88cc126e47fbab3664736f6c63430008140033",
    "sourceMap": "1400:4350:13:-:0;;;1583:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1681:7;;1721:11;936:32:8;719:10:12;936:18:8;:32::i;:::-;-1:-1:-1;;;;;564:24:0;;;2042:5:9;:13;2050:5;2042;:13;:::i;:::-;-1:-1:-1;2065:7:9;:17;2075:7;2065;:17;:::i;:::-;-1:-1:-1;;;;;;;;1748:27:13;::::2;;::::0;1813:23:::2;1827:4;1834:1;1813:5;:23::i;:::-;1922:54;1939:4;1946:10;-1:-1:-1::0;;1922:8:13::2;:54::i;:::-;1583:400:::0;;;1400:4350;;2433:187:8;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:8;;;-1:-1:-1;;;;;;2541:17:8;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;8567:535:9:-;-1:-1:-1;;;;;8650:21:9;;8642:65;;;;-1:-1:-1;;;8642:65:9;;4521:2:14;8642:65:9;;;4503:21:14;4560:2;4540:18;;;4533:30;4599:33;4579:18;;;4572:61;4650:18;;8642:65:9;;;;;;;;;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:9;;;;;;:9;:18;;;;;;;;:28;;;;;;8999:37;5052:25:14;;;8999:37:9;;5025:18:14;8999:37:9;;;;;;;8567:535;;:::o;10504:370::-;-1:-1:-1;;;;;10635:19:9;;10627:68;;;;-1:-1:-1;;;10627:68:9;;5290:2:14;10627:68:9;;;5272:21:14;5329:2;5309:18;;;5302:30;5368:34;5348:18;;;5341:62;-1:-1:-1;;;5419:18:14;;;5412:34;5463:19;;10627:68:9;5088:400:14;10627:68:9;-1:-1:-1;;;;;10713:21:9;;10705:68;;;;-1:-1:-1;;;10705:68:9;;5695:2:14;10705:68:9;;;5677:21:14;5734:2;5714:18;;;5707:30;5773:34;5753:18;;;5746:62;-1:-1:-1;;;5824:18:14;;;5817:32;5866:19;;10705:68:9;5493:398:14;10705:68:9;-1:-1:-1;;;;;10784:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;5052:25:14;;;10835:32:9;;5025:18:14;10835:32:9;;;;;;;10504:370;;;:::o;12180:121::-;;;;:::o;14:131:14:-;-1:-1:-1;;;;;89:31:14;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:127::-;211:10;206:3;202:20;199:1;192:31;242:4;239:1;232:15;266:4;263:1;256:15;282:151;374:13;;396:31;374:13;396:31;:::i;:::-;282:151;;;:::o;438:1287::-;555:6;563;571;624:2;612:9;603:7;599:23;595:32;592:52;;;640:1;637;630:12;592:52;672:9;666:16;691:31;716:5;691:31;:::i;:::-;765:2;796:18;;;790:25;741:5;;-1:-1:-1;765:2:14;-1:-1:-1;;;;;864:14:14;;;861:34;;;891:1;888;881:12;861:34;929:6;918:9;914:22;904:32;;974:7;967:4;963:2;959:13;955:27;945:55;;996:1;993;986:12;945:55;1025:2;1019:9;1047:2;1043;1040:10;1037:36;;;1053:18;;:::i;:::-;1128:2;1122:9;1096:2;1182:13;;-1:-1:-1;;1178:22:14;;;1202:2;1174:31;1170:40;1158:53;;;1226:18;;;1246:22;;;1223:46;1220:72;;;1272:18;;:::i;:::-;1312:10;1308:2;1301:22;1347:2;1339:6;1332:18;1387:7;1382:2;1377;1373;1369:11;1365:20;1362:33;1359:53;;;1408:1;1405;1398:12;1359:53;1430:1;1421:10;;1440:129;1454:2;1451:1;1448:9;1440:129;;;1542:10;;;1538:19;;1532:26;1511:14;;;1507:23;;1500:59;1465:10;;;;1440:129;;;1611:1;1606:2;1601;1593:6;1589:15;1585:24;1578:35;1632:6;1622:16;;;;;;;;1657:62;1715:2;1704:9;1700:18;1657:62;:::i;:::-;1647:72;;438:1287;;;;;:::o;1730:380::-;1809:1;1805:12;;;;1852;;;1873:61;;1927:4;1919:6;1915:17;1905:27;;1873:61;1980:2;1972:6;1969:14;1949:18;1946:38;1943:161;;2026:10;2021:3;2017:20;2014:1;2007:31;2061:4;2058:1;2051:15;2089:4;2086:1;2079:15;1943:161;;1730:380;;;:::o;2241:545::-;2343:2;2338:3;2335:11;2332:448;;;2379:1;2404:5;2400:2;2393:17;2449:4;2445:2;2435:19;2519:2;2507:10;2503:19;2500:1;2496:27;2490:4;2486:38;2555:4;2543:10;2540:20;2537:47;;;-1:-1:-1;2578:4:14;2537:47;2633:2;2628:3;2624:12;2621:1;2617:20;2611:4;2607:31;2597:41;;2688:82;2706:2;2699:5;2696:13;2688:82;;;2751:17;;;2732:1;2721:13;2688:82;;;2692:3;;;2241:545;;;:::o;2962:1352::-;3082:10;;-1:-1:-1;;;;;3104:30:14;;3101:56;;;3137:18;;:::i;:::-;3166:97;3256:6;3216:38;3248:4;3242:11;3216:38;:::i;:::-;3210:4;3166:97;:::i;:::-;3318:4;;3382:2;3371:14;;3399:1;3394:663;;;;4101:1;4118:6;4115:89;;;-1:-1:-1;4170:19:14;;;4164:26;4115:89;-1:-1:-1;;2919:1:14;2915:11;;;2911:24;2907:29;2897:40;2943:1;2939:11;;;2894:57;4217:81;;3364:944;;3394:663;2188:1;2181:14;;;2225:4;2212:18;;-1:-1:-1;;3430:20:14;;;3548:236;3562:7;3559:1;3556:14;3548:236;;;3651:19;;;3645:26;3630:42;;3743:27;;;;3711:1;3699:14;;;;3578:19;;3548:236;;;3552:3;3812:6;3803:7;3800:19;3797:201;;;3873:19;;;3867:26;-1:-1:-1;;3956:1:14;3952:14;;;3968:3;3948:24;3944:37;3940:42;3925:58;3910:74;;3797:201;-1:-1:-1;;;;;4044:1:14;4028:14;;;4024:22;4011:36;;-1:-1:-1;2962:1352:14:o;4679:222::-;4744:9;;;4765:10;;;4762:133;;;4817:10;4812:3;4808:20;4805:1;4798:31;4852:4;4849:1;4842:15;4880:4;4877:1;4870:15;4762:133;4679:222;;;;:::o;5493:398::-;1400:4350:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101815760003560e01c80639f5ca221116100d1578063c23a5cea1161008a578063dd62ed3e11610064578063dd62ed3e14610453578063f0dda65c14610473578063f2fde38b14610493578063f465c77e146104b357600080fd5b8063c23a5cea14610416578063c399ec8814610436578063d0e30db01461044b57600080fd5b80639f5ca22114610339578063a457c2d71461036d578063a9059cbb1461038d578063a9a23409146103ad578063b0d691fe146103cd578063bb9fe6bf1461040157600080fd5b8063313ce5671161013e578063715018a611610118578063715018a6146102c7578063796d4371146102dc5780638da5cb5b146102f257806395d89b411461032457600080fd5b8063313ce56714610255578063395093511461027157806370a082311461029157600080fd5b80630396cb601461018657806306fdde031461019b578063095ea7b3146101c657806318160ddd146101f6578063205c28781461021557806323b872dd14610235575b600080fd5b610199610194366004611255565b6104e1565b005b3480156101a757600080fd5b506101b061056c565b6040516101bd91906112c8565b60405180910390f35b3480156101d257600080fd5b506101e66101e13660046112f0565b6105fe565b60405190151581526020016101bd565b34801561020257600080fd5b506003545b6040519081526020016101bd565b34801561022157600080fd5b506101996102303660046112f0565b610618565b34801561024157600080fd5b506101e661025036600461131c565b61068a565b34801561026157600080fd5b50604051601281526020016101bd565b34801561027d57600080fd5b506101e661028c3660046112f0565b6106ae565b34801561029d57600080fd5b506102076102ac36600461135d565b6001600160a01b031660009081526001602052604090205490565b3480156102d357600080fd5b506101996106d0565b3480156102e857600080fd5b50610207613a9881565b3480156102fe57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b34801561033057600080fd5b506101b06106e4565b34801561034557600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037957600080fd5b506101e66103883660046112f0565b6106f3565b34801561039957600080fd5b506101e66103a83660046112f0565b610773565b3480156103b957600080fd5b506101996103c836600461137a565b610781565b3480156103d957600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061019961079b565b34801561042257600080fd5b5061019961043136600461135d565b610812565b34801561044257600080fd5b50610207610898565b610199610928565b34801561045f57600080fd5b5061020761046e366004611409565b61098a565b34801561047f57600080fd5b5061019961048e3660046112f0565b6109b5565b34801561049f57600080fd5b506101996104ae36600461135d565b6109cb565b3480156104bf57600080fd5b506104d36104ce366004611442565b610a09565b6040516101bd929190611496565b6104e9610a2c565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050505050565b60606004805461057b906114b8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906114b8565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b60003361060c818585610a86565b60019150505b92915050565b610620610a2c565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561055057600080fd5b600033610698858285610baa565b6106a3858585610c1e565b506001949350505050565b60003361060c8185856106c1838361098a565b6106cb91906114f2565b610a86565b6106d8610a2c565b6106e26000610dc9565b565b60606005805461057b906114b8565b60003381610701828661098a565b9050838110156107665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6106a38286868403610a86565b60003361060c818585610c1e565b610789610e19565b61079584848484610e89565b50505050565b6107a3610a2c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107fe57600080fd5b505af1158015610795573d6000803e3d6000fd5b61081a610a2c565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561087d57600080fd5b505af1158015610891573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611513565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561087d57600080fd5b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6109bd610a2c565b6109c78282610ebc565b5050565b6109d3610a2c565b6109f0306109e96000546001600160a01b031690565b6000610a86565b6109f981610f7d565b610a063082600019610a86565b50565b60606000610a15610e19565b610a20858585610ff3565b91509150935093915050565b6000546001600160a01b031633146106e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075d565b6001600160a01b038316610ae85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161075d565b6001600160a01b038216610b495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161075d565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610bb6848461098a565b905060001981146107955781811015610c115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161075d565b6107958484848403610a86565b6001600160a01b038316610c825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161075d565b6001600160a01b038216610ce45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161075d565b6001600160a01b03831660009081526001602052604090205481811015610d5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161075d565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610dbc9086815260200190565b60405180910390a3610795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106e25760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161075d565b6000610e978385018561135d565b90506000610eaf610eaa613a98856114f2565b611196565b9050610564823083610c1e565b6001600160a01b038216610f125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161075d565b8060036000828254610f2491906114f2565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b610f85610a2c565b6001600160a01b038116610fea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075d565b610a0681610dc9565b606060008061100184611196565b9050613a988660a00135116110675760405162461bcd60e51b815260206004820152602660248201527f546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f72206044820152650706f73744f760d41b606482015260840161075d565b611074604087018761152c565b1590506110f857611084866111a3565b806110956102ac602089018961135d565b10156110f35760405162461bcd60e51b815260206004820152602760248201527f546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d6044820152666372656174652960c81b606482015260840161075d565b611157565b806111096102ac602089018961135d565b10156111575760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e5061796d61737465723a206e6f2062616c616e6365000000000000604482015260640161075d565b611164602087018761135d565b604080516001600160a01b0390921660208301520160408051601f198184030181529190529660009650945050505050565b600061061260648361157a565b60006111b2604083018361152c565b6111c19160149160009161159c565b6111ca916115c6565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146109c75760405162461bcd60e51b815260206004820152602560248201527f546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666160448201526463746f727960d81b606482015260840161075d565b60006020828403121561126757600080fd5b813563ffffffff8116811461127b57600080fd5b9392505050565b6000815180845260005b818110156112a85760208185018101518683018201520161128c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061127b6020830184611282565b6001600160a01b0381168114610a0657600080fd5b6000806040838503121561130357600080fd5b823561130e816112db565b946020939093013593505050565b60008060006060848603121561133157600080fd5b833561133c816112db565b9250602084013561134c816112db565b929592945050506040919091013590565b60006020828403121561136f57600080fd5b813561127b816112db565b6000806000806060858703121561139057600080fd5b84356003811061139f57600080fd5b9350602085013567ffffffffffffffff808211156113bc57600080fd5b818701915087601f8301126113d057600080fd5b8135818111156113df57600080fd5b8860208285010111156113f157600080fd5b95986020929092019750949560400135945092505050565b6000806040838503121561141c57600080fd5b8235611427816112db565b91506020830135611437816112db565b809150509250929050565b60008060006060848603121561145757600080fd5b833567ffffffffffffffff81111561146e57600080fd5b8401610160818703121561148157600080fd5b95602085013595506040909401359392505050565b6040815260006114a96040830185611282565b90508260208301529392505050565b600181811c908216806114cc57607f821691505b6020821081036114ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561061257634e487b7160e01b600052601160045260246000fd5b60006020828403121561152557600080fd5b5051919050565b6000808335601e1984360301811261154357600080fd5b83018035915067ffffffffffffffff82111561155e57600080fd5b60200191503681900382131561157357600080fd5b9250929050565b60008261159757634e487b7160e01b600052601260045260246000fd5b500490565b600080858511156115ac57600080fd5b838611156115b957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115f35780818660140360031b1b83161692505b50509291505056fea26469706673582212208d2f358dbf5adf0926797ce1a9f0875dbef2903fe14e491b88cc126e47fbab3664736f6c63430008140033",
    "sourceMap": "1400:4350:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:141:0;;;;;;:::i;:::-;;:::i;:::-;;2154:98:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;-1:-1:-1;4431:197:9;;;;;:::i;:::-;;:::i;:::-;;;1569:14:14;;1562:22;1544:41;;1532:2;1517:18;4431:197:9;1404:187:14;3242:106:9;;;;;;;;;;-1:-1:-1;3329:12:9;;3242:106;;;1742:25:14;;;1730:2;1715:18;3242:106:9;1596:177:14;2721:149:0;;;;;;;;;;-1:-1:-1;2721:149:0;;;;;:::i;:::-;;:::i;5190:286:9:-;;;;;;;;;;-1:-1:-1;5190:286:9;;;;;:::i;:::-;;:::i;3091:91::-;;;;;;;;;;-1:-1:-1;3091:91:9;;3173:2;2709:36:14;;2697:2;2682:18;3091:91:9;2567:184:14;5871:234:9;;;;;;;;;;-1:-1:-1;5871:234:9;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;;;;;-1:-1:-1;3406:125:9;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:9;3480:7;3506:18;;;:9;:18;;;;;;;3406:125;1831:101:8;;;;;;;;;;;;;:::i;1490:44:13:-;;;;;;;;;;;;1529:5;1490:44;;1201:85:8;;;;;;;;;;-1:-1:-1;1247:7:8;1273:6;-1:-1:-1;;;;;1273:6:8;1201:85;;;-1:-1:-1;;;;;3172:32:14;;;3154:51;;3142:2;3127:18;1201:85:8;3008:203:14;2365:102:9;;;;;;;;;;;;;:::i;1541:35:13:-;;;;;;;;;;;;;;;6592:427:9;;;;;;;;;;-1:-1:-1;6592:427:9;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;;;;;-1:-1:-1;3727:189:9;;;;;:::i;:::-;;:::i;1143:186:0:-;;;;;;;;;;-1:-1:-1;1143:186:0;;;;;:::i;:::-;;:::i;471:39::-;;;;;;;;;;;;;;;3588:83;;;;;;;;;;;;;:::i;3890:133::-;;;;;;;;;;-1:-1:-1;3890:133:0;;;;;:::i;:::-;;:::i;3318:111::-;;;;;;;;;;;;;:::i;2474:105::-;;;:::i;3974:149:9:-;;;;;;;;;;-1:-1:-1;3974:149:9;;;;;:::i;:::-;;:::i;2186:115:13:-;;;;;;;;;;-1:-1:-1;2186:115:13;;;;;:::i;:::-;;:::i;2544:361::-;;;;;;;;;;-1:-1:-1;2544:361:13;;;;;:::i;:::-;;:::i;632:290:0:-;;;;;;;;;;-1:-1:-1;632:290:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3094:141::-;1094:13:8;:11;:13::i;:::-;3173:55:0::1;::::0;-1:-1:-1;;;3173:55:0;;5919:10:14;5907:23;;3173:55:0::1;::::0;::::1;5889:42:14::0;3173:10:0::1;-1:-1:-1::0;;;;;3173:19:0::1;::::0;::::1;::::0;3201:9:::1;::::0;5862:18:14;;3173:55:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;3094:141:::0;:::o;2154:98:9:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:12;4568:32:9;719:10:12;4584:7:9;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;2721:149:0:-;1094:13:8;:11;:13::i;:::-;2817:46:0::1;::::0;-1:-1:-1;;;2817:46:0;;-1:-1:-1;;;;;6535:32:14;;;2817:46:0::1;::::0;::::1;6517:51:14::0;6584:18;;;6577:34;;;2817:10:0::1;:21;::::0;::::1;::::0;6490:18:14;;2817:46:0::1;;;;;;;;;;;;;;;;;::::0;::::1;5190:286:9::0;5317:4;719:10:12;5373:38:9;5389:4;719:10:12;5404:6:9;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:9;;5190:286;-1:-1:-1;;;;5190:286:9:o;5871:234::-;5959:4;719:10:12;6013:64:9;719:10:12;6029:7:9;6066:10;6038:25;719:10:12;6029:7:9;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;1831:101:8:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2365:102:9:-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;6685:4;719:10:12;6685:4:9;6766:25;719:10:12;6783:7:9;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:9;;7051:2:14;6801:85:9;;;7033:21:14;7090:2;7070:18;;;7063:30;7129:34;7109:18;;;7102:62;-1:-1:-1;;;7180:18:14;;;7173:35;7225:19;;6801:85:9;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:12;3860:28:9;719:10:12;3877:2:9;3881:6;3860:9;:28::i;1143:186:0:-;1251:24;:22;:24::i;:::-;1285:37;1293:4;1299:7;;1308:13;1285:7;:37::i;:::-;1143:186;;;;:::o;3588:83::-;1094:13:8;:11;:13::i;:::-;3640:10:0::1;-1:-1:-1::0;;;;;3640:22:0::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;3890:133:::0;1094:13:8;:11;:13::i;:::-;3975:41:0::1;::::0;-1:-1:-1;;;3975:41:0;;-1:-1:-1;;;;;3172:32:14;;;3975:41:0::1;::::0;::::1;3154:51:14::0;3975:10:0::1;:24;::::0;::::1;::::0;3127:18:14;;3975:41:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3890:133:::0;:::o;3318:111::-;3387:35;;-1:-1:-1;;;3387:35:0;;3416:4;3387:35;;;3154:51:14;3361:7:0;;3387:10;-1:-1:-1;;;;;3387:20:0;;;;3127:18:14;;3387:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3380:42;;3318:111;:::o;2474:105::-;2518:54;;-1:-1:-1;;;2518:54:0;;2566:4;2518:54;;;3154:51:14;2518:10:0;-1:-1:-1;;;;;2518:20:0;;;;2547:9;;3127:18:14;;2518:54:0;;;;;;;;;;;;;;;;;;;3974:149:9;-1:-1:-1;;;;;4089:18:9;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;2186:115:13:-;1094:13:8;:11;:13::i;:::-;2270:24:13::1;2276:9;2287:6;2270:5;:24::i;:::-;2186:115:::0;;:::o;2544:361::-;1094:13:8;:11;:13::i;:::-;2678:35:13::1;2695:4;2702:7;1247::8::0;1273:6;-1:-1:-1;;;;;1273:6:8;;1201:85;2702:7:13::1;2711:1;2678:8;:35::i;:::-;2723:33;2747:8;2723:23;:33::i;:::-;2846:52;2863:4;2870:8;-1:-1:-1::0;;2846:8:13::1;:52::i;:::-;2544:361:::0;:::o;632:290:0:-;764:20;786:22;821:24;:22;:24::i;:::-;862:53;887:6;895:10;907:7;862:24;:53::i;:::-;855:60;;;;632:290;;;;;;:::o;1359:130:8:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:8;719:10:12;1422:23:8;1414:68;;;;-1:-1:-1;;;1414:68:8;;7870:2:14;1414:68:8;;;7852:21:14;;;7889:18;;;7882:30;7948:34;7928:18;;;7921:62;8000:18;;1414:68:8;7668:356:14;10504:370:9;-1:-1:-1;;;;;10635:19:9;;10627:68;;;;-1:-1:-1;;;10627:68:9;;8231:2:14;10627:68:9;;;8213:21:14;8270:2;8250:18;;;8243:30;8309:34;8289:18;;;8282:62;-1:-1:-1;;;8360:18:14;;;8353:34;8404:19;;10627:68:9;8029:400:14;10627:68:9;-1:-1:-1;;;;;10713:21:9;;10705:68;;;;-1:-1:-1;;;10705:68:9;;8636:2:14;10705:68:9;;;8618:21:14;8675:2;8655:18;;;8648:30;8714:34;8694:18;;;8687:62;-1:-1:-1;;;8765:18:14;;;8758:32;8807:19;;10705:68:9;8434:398:14;10705:68:9;-1:-1:-1;;;;;10784:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1742:25:14;;;10835:32:9;;1715:18:14;10835:32:9;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:9;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:9;;9039:2:14;11404:68:9;;;9021:21:14;9078:2;9058:18;;;9051:30;9117:31;9097:18;;;9090:59;9166:18;;11404:68:9;8837:353:14;11404:68:9;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;7473:818::-;-1:-1:-1;;;;;7599:18:9;;7591:68;;;;-1:-1:-1;;;7591:68:9;;9397:2:14;7591:68:9;;;9379:21:14;9436:2;9416:18;;;9409:30;9475:34;9455:18;;;9448:62;-1:-1:-1;;;9526:18:14;;;9519:35;9571:19;;7591:68:9;9195:401:14;7591:68:9;-1:-1:-1;;;;;7677:16:9;;7669:64;;;;-1:-1:-1;;;7669:64:9;;9803:2:14;7669:64:9;;;9785:21:14;9842:2;9822:18;;;9815:30;9881:34;9861:18;;;9854:62;-1:-1:-1;;;9932:18:14;;;9925:33;9975:19;;7669:64:9;9601:399:14;7669:64:9;-1:-1:-1;;;;;7815:15:9;;7793:19;7815:15;;;:9;:15;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:9;;10207:2:14;7840:72:9;;;10189:21:14;10246:2;10226:18;;;10219:30;10285:34;10265:18;;;10258:62;-1:-1:-1;;;10336:18:14;;;10329:36;10382:19;;7840:72:9;10005:402:14;7840:72:9;-1:-1:-1;;;;;7946:15:9;;;;;;;:9;:15;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;;;;;7978:6;1742:25:14;;1730:2;1715:18;;1596:177;8210:26:9;;;;;;;;8247:37;12180:121;2433:187:8;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:8;;;-1:-1:-1;;;;;;2541:17:8;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;4087:135:0:-;4156:10;-1:-1:-1;;;;;4178:10:0;4156:33;;4148:67;;;;-1:-1:-1;;;4148:67:0;;10614:2:14;4148:67:0;;;10596:21:14;10653:2;10633:18;;;10626:30;-1:-1:-1;;;10672:18:14;;;10665:51;10733:18;;4148:67:0;10412:345:14;5240:508:13;5456:14;5473:30;;;;5484:7;5473:30;:::i;:::-;5456:47;-1:-1:-1;5513:14:13;5530:48;5549:28;1529:5;5549:13;:28;:::i;:::-;5530:18;:48::i;:::-;5513:65;;5701:40;5711:6;5727:4;5734:6;5701:9;:40::i;8567:535:9:-;-1:-1:-1;;;;;8650:21:9;;8642:65;;;;-1:-1:-1;;;8642:65:9;;10964:2:14;8642:65:9;;;10946:21:14;11003:2;10983:18;;;10976:30;11042:33;11022:18;;;11015:61;11093:18;;8642:65:9;10762:355:14;8642:65:9;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:9;;;;;;:9;:18;;;;;;;;:28;;;;;;8999:37;1742:25:14;;;8999:37:9;;1715:18:14;8999:37:9;;;;;;;2186:115:13;;:::o;2081:198:8:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:8;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:8;;11324:2:14;2161:73:8::1;::::0;::::1;11306:21:14::0;11363:2;11343:18;;;11336:30;11402:34;11382:18;;;11375:62;-1:-1:-1;;;11453:18:14;;;11446:36;11499:19;;2161:73:8::1;11122:402:14::0;2161:73:8::1;2244:28;2263:8;2244:18;:28::i;3418:949:13:-:0;3596:20;3618:22;3656:20;3679:35;3698:15;3679:18;:35::i;:::-;3656:58;;1529:5;3915:6;:27;;;:42;3907:93;;;;-1:-1:-1;;;3907:93:13;;11731:2:14;3907:93:13;;;11713:21:14;11770:2;11750:18;;;11743:30;11809:34;11789:18;;;11782:62;-1:-1:-1;;;11860:18:14;;;11853:36;11906:19;;3907:93:13;11529:402:14;3907:93:13;4015:15;;;;:6;:15;:::i;:::-;:27;;-1:-1:-1;4011:302:13;;4058:28;4079:6;4058:20;:28::i;:::-;4136:12;4108:24;4118:13;;;;:6;:13;:::i;4108:24::-;:40;;4100:92;;;;-1:-1:-1;;;4100:92:13;;12664:2:14;4100:92:13;;;12646:21:14;12703:2;12683:18;;;12676:30;12742:34;12722:18;;;12715:62;-1:-1:-1;;;12793:18:14;;;12786:37;12840:19;;4100:92:13;12462:403:14;4100:92:13;4011:302;;;4259:12;4231:24;4241:13;;;;:6;:13;:::i;4231:24::-;:40;;4223:79;;;;-1:-1:-1;;;4223:79:13;;13072:2:14;4223:79:13;;;13054:21:14;13111:2;13091:18;;;13084:30;13150:28;13130:18;;;13123:56;13196:18;;4223:79:13;12870:350:14;4223:79:13;4342:13;;;;:6;:13;:::i;:::-;4331:25;;;-1:-1:-1;;;;;3172:32:14;;;4331:25:13;;;3154:51:14;3127:18;4331:25:13;;;-1:-1:-1;;4331:25:13;;;;;;;;;;4358:1;;-1:-1:-1;3418:949:13;-1:-1:-1;;;;;3418:949:13:o;3036:135::-;3113:18;3150:14;3161:3;3150:8;:14;:::i;4531:238::-;4624:15;4658;;;;:6;:15;:::i;:::-;:21;;4676:2;;4674:1;;4658:21;:::i;:::-;4650:30;;;:::i;:::-;4642:39;;;-1:-1:-1;;;;;;4710:10:13;4699:21;;;4691:71;;;;-1:-1:-1;;;4691:71:13;;14327:2:14;4691:71:13;;;14309:21:14;14366:2;14346:18;;;14339:30;14405:34;14385:18;;;14378:62;-1:-1:-1;;;14456:18:14;;;14449:35;14501:19;;4691:71:13;14125:401:14;14:276;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:10;223:5;219:22;212:5;209:33;199:61;;256:1;253;246:12;199:61;279:5;14:276;-1:-1:-1;;;14:276:14:o;295:423::-;337:3;375:5;369:12;402:6;397:3;390:19;427:1;437:162;451:6;448:1;445:13;437:162;;;513:4;569:13;;;565:22;;559:29;541:11;;;537:20;;530:59;466:12;437:162;;;441:3;644:1;637:4;628:6;623:3;619:16;615:27;608:38;707:4;700:2;696:7;691:2;683:6;679:15;675:29;670:3;666:39;662:50;655:57;;;295:423;;;;:::o;723:220::-;872:2;861:9;854:21;835:4;892:45;933:2;922:9;918:18;910:6;892:45;:::i;948:131::-;-1:-1:-1;;;;;1023:31:14;;1013:42;;1003:70;;1069:1;1066;1059:12;1084:315;1152:6;1160;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;1268:9;1255:23;1287:31;1312:5;1287:31;:::i;:::-;1337:5;1389:2;1374:18;;;;1361:32;;-1:-1:-1;;;1084:315:14:o;2106:456::-;2183:6;2191;2199;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;2307:9;2294:23;2326:31;2351:5;2326:31;:::i;:::-;2376:5;-1:-1:-1;2433:2:14;2418:18;;2405:32;2446:33;2405:32;2446:33;:::i;:::-;2106:456;;2498:7;;-1:-1:-1;;;2552:2:14;2537:18;;;;2524:32;;2106:456::o;2756:247::-;2815:6;2868:2;2856:9;2847:7;2843:23;2839:32;2836:52;;;2884:1;2881;2874:12;2836:52;2923:9;2910:23;2942:31;2967:5;2942:31;:::i;3216:817::-;3318:6;3326;3334;3342;3395:2;3383:9;3374:7;3370:23;3366:32;3363:52;;;3411:1;3408;3401:12;3363:52;3450:9;3437:23;3489:1;3482:5;3479:12;3469:40;;3505:1;3502;3495:12;3469:40;3528:5;-1:-1:-1;3584:2:14;3569:18;;3556:32;3607:18;3637:14;;;3634:34;;;3664:1;3661;3654:12;3634:34;3702:6;3691:9;3687:22;3677:32;;3747:7;3740:4;3736:2;3732:13;3728:27;3718:55;;3769:1;3766;3759:12;3718:55;3809:2;3796:16;3835:2;3827:6;3824:14;3821:34;;;3851:1;3848;3841:12;3821:34;3896:7;3891:2;3882:6;3878:2;3874:15;3870:24;3867:37;3864:57;;;3917:1;3914;3907:12;3864:57;3216:817;;3948:2;3940:11;;;;;-1:-1:-1;3970:6:14;;4023:2;4008:18;3995:32;;-1:-1:-1;3216:817:14;-1:-1:-1;;;3216:817:14:o;4525:388::-;4593:6;4601;4654:2;4642:9;4633:7;4629:23;4625:32;4622:52;;;4670:1;4667;4660:12;4622:52;4709:9;4696:23;4728:31;4753:5;4728:31;:::i;:::-;4778:5;-1:-1:-1;4835:2:14;4820:18;;4807:32;4848:33;4807:32;4848:33;:::i;:::-;4900:7;4890:17;;;4525:388;;;;;:::o;4918:528::-;5027:6;5035;5043;5096:2;5084:9;5075:7;5071:23;5067:32;5064:52;;;5112:1;5109;5102:12;5064:52;5152:9;5139:23;5185:18;5177:6;5174:30;5171:50;;;5217:1;5214;5207:12;5171:50;5240:22;;5296:3;5278:16;;;5274:26;5271:46;;;5313:1;5310;5303:12;5271:46;5336:2;5385;5370:18;;5357:32;;-1:-1:-1;5436:2:14;5421:18;;;5408:32;;4918:528;-1:-1:-1;;;4918:528:14:o;5451:289::-;5626:2;5615:9;5608:21;5589:4;5646:45;5687:2;5676:9;5672:18;5664:6;5646:45;:::i;:::-;5638:53;;5727:6;5722:2;5711:9;5707:18;5700:34;5451:289;;;;;:::o;5942:380::-;6021:1;6017:12;;;;6064;;;6085:61;;6139:4;6131:6;6127:17;6117:27;;6085:61;6192:2;6184:6;6181:14;6161:18;6158:38;6155:161;;6238:10;6233:3;6229:20;6226:1;6219:31;6273:4;6270:1;6263:15;6301:4;6298:1;6291:15;6155:161;;5942:380;;;:::o;6622:222::-;6687:9;;;6708:10;;;6705:133;;;6760:10;6755:3;6751:20;6748:1;6741:31;6795:4;6792:1;6785:15;6823:4;6820:1;6813:15;7479:184;7549:6;7602:2;7590:9;7581:7;7577:23;7573:32;7570:52;;;7618:1;7615;7608:12;7570:52;-1:-1:-1;7641:16:14;;7479:184;-1:-1:-1;7479:184:14:o;11936:521::-;12013:4;12019:6;12079:11;12066:25;12173:2;12169:7;12158:8;12142:14;12138:29;12134:43;12114:18;12110:68;12100:96;;12192:1;12189;12182:12;12100:96;12219:33;;12271:20;;;-1:-1:-1;12314:18:14;12303:30;;12300:50;;;12346:1;12343;12336:12;12300:50;12379:4;12367:17;;-1:-1:-1;12410:14:14;12406:27;;;12396:38;;12393:58;;;12447:1;12444;12437:12;12393:58;11936:521;;;;;:::o;13225:217::-;13265:1;13291;13281:132;;13335:10;13330:3;13326:20;13323:1;13316:31;13370:4;13367:1;13360:15;13398:4;13395:1;13388:15;13281:132;-1:-1:-1;13427:9:14;;13225:217::o;13447:331::-;13552:9;13563;13605:8;13593:10;13590:24;13587:44;;;13627:1;13624;13617:12;13587:44;13656:6;13646:8;13643:20;13640:40;;;13676:1;13673;13666:12;13640:40;-1:-1:-1;;13702:23:14;;;13747:25;;;;;-1:-1:-1;13447:331:14:o;13783:337::-;-1:-1:-1;;13904:19:14;;13991:11;;;;14022:2;14014:11;;14011:103;;;14101:2;14095;14088:3;14084:2;14080:12;14077:1;14073:20;14069:29;14065:2;14061:38;14057:47;14048:56;;14011:103;;;13783:337;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "13": [
        {
          "start": 991,
          "length": 32
        },
        {
          "start": 1283,
          "length": 32
        },
        {
          "start": 1606,
          "length": 32
        },
        {
          "start": 1957,
          "length": 32
        },
        {
          "start": 2105,
          "length": 32
        },
        {
          "start": 2224,
          "length": 32
        },
        {
          "start": 2365,
          "length": 32
        },
        {
          "start": 3620,
          "length": 32
        }
      ],
      "1901": [
        {
          "start": 843,
          "length": 32
        },
        {
          "start": 4569,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "COST_OF_POST()": "796d4371",
    "addStake(uint32)": "0396cb60",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "deposit()": "d0e30db0",
    "entryPoint()": "b0d691fe",
    "getDeposit()": "c399ec88",
    "increaseAllowance(address,uint256)": "39509351",
    "mintTokens(address,uint256)": "f0dda65c",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "postOp(uint8,bytes,uint256)": "a9a23409",
    "renounceOwnership()": "715018a6",
    "symbol()": "95d89b41",
    "theFactory()": "9f5ca221",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b",
    "unlockStake()": "bb9fe6bf",
    "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": "f465c77e",
    "withdrawStake(address)": "c23a5cea",
    "withdrawTo(address,uint256)": "205c2878"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COST_OF_POST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- the unstake delay for this paymaster. Can only be increased.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintTokens(address,uint256)\":{\"params\":{\"amount\":\"- the amount it will receive.\",\"recipient\":\"- the address that will receive the minted tokens.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"mintTokens(address,uint256)\":{\"notice\":\"helpers for owner, to mint and withdraw tokens.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"transferOwnership(address)\":{\"notice\":\"transfer paymaster ownership. owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance) when changing owner, the old owner's withdrawal rights are revoked.\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"}},\"notice\":\"A sample paymaster that defines itself as a token to pay for gas. The paymaster IS the token to use, since a paymaster cannot use an external contract. Also, the exchange rate has to be fixed, since it can't reference an external Uniswap or other exchange contract. subclass should override \\\"getTokenValueOfEth\\\" to provide actual token exchange rate, settable by the owner. Known Limitation: this paymaster is exploitable when put into a batch with multiple ops (of different accounts): - while a single op can't exploit the paymaster (if postOp fails to withdraw the tokens, the user's op is reverted,   and then we know we can withdraw the tokens), multiple ops with different senders (all using this paymaster)   in a batch can withdraw funds from 2nd and further ops, forcing the paymaster itself to pay (from its deposit) - Possible workarounds are either use a more complex paymaster scheme (e.g. the DepositPaymaster) or   to whitelist the account and the called method ids.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TokenPaymaster.sol\":\"TokenPaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@eth-infinitism/contracts/=lib/eth-infinitism/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-infinitism/=lib/eth-infinitism/contracts/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/eth-infinitism/contracts/core/BasePaymaster.sol\":{\"keccak256\":\"0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0\",\"dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq\"]},\"lib/eth-infinitism/contracts/core/Helpers.sol\":{\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746\",\"dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU\"]},\"lib/eth-infinitism/contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b\",\"dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP\"]},\"lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf\",\"dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd\"]},\"lib/eth-infinitism/contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2\",\"dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b\"]},\"lib/eth-infinitism/contracts/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8\",\"dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia\"]},\"lib/eth-infinitism/contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3\",\"dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ\"]},\"lib/eth-infinitism/contracts/interfaces/UserOperation.sol\":{\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c\",\"dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/TokenPaymaster.sol\":{\"keccak256\":\"0xc392e15dd7564580628ed674b5781180ea2040ef5f4766a1fce65f1c74ae96f2\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://59956598916e9974398be60866e257ca9d52b12d511310525329739837e44e4a\",\"dweb:/ipfs/QmPifXpaV6ZkxeKkk9m6CYW7YrN6mBSJce9CHdwhXXodPV\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "accountFactory",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "contract IEntryPoint",
              "name": "_entryPoint",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COST_OF_POST",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "addStake"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "entryPoint",
          "outputs": [
            {
              "internalType": "contract IEntryPoint",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTokens"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum IPaymaster.PostOpMode",
              "name": "mode",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "actualGasCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "postOp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "theFactory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlockStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct UserOperation",
              "name": "userOp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "initCode",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "callGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "verificationGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preVerificationGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterAndData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "userOpHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maxCost",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "validatePaymasterUserOp",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validationData",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawStake"
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "withdrawAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTo"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addStake(uint32)": {
            "params": {
              "unstakeDelaySec": "- the unstake delay for this paymaster. Can only be increased."
            }
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "mintTokens(address,uint256)": {
            "params": {
              "amount": "- the amount it will receive.",
              "recipient": "- the address that will receive the minted tokens."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "postOp(uint8,bytes,uint256)": {
            "params": {
              "actualGasCost": "- actual gas used so far (without this postOp call).",
              "context": "- the context value returned by validatePaymasterUserOp",
              "mode": "enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "params": {
              "maxCost": "the maximum cost of this transaction (based on maximum gas and gas price from userOp)",
              "userOp": "the user operation",
              "userOpHash": "hash of the user's request data."
            },
            "returns": {
              "context": "value to send to a postOp      zero length to signify postOp is not required.",
              "validationData": "signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."
            }
          },
          "withdrawStake(address)": {
            "params": {
              "withdrawAddress": "the address to send withdrawn value."
            }
          },
          "withdrawTo(address,uint256)": {
            "params": {
              "amount": "to withdraw",
              "withdrawAddress": "target to send to"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addStake(uint32)": {
            "notice": "add stake for this paymaster. This method can also carry eth value to add to the current stake."
          },
          "deposit()": {
            "notice": "add a deposit for this paymaster, used for paying for transaction fees"
          },
          "getDeposit()": {
            "notice": "return current paymaster's deposit on the entryPoint."
          },
          "mintTokens(address,uint256)": {
            "notice": "helpers for owner, to mint and withdraw tokens."
          },
          "postOp(uint8,bytes,uint256)": {
            "notice": "post-operation handler. Must verify sender is the entryPoint"
          },
          "transferOwnership(address)": {
            "notice": "transfer paymaster ownership. owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance) when changing owner, the old owner's withdrawal rights are revoked."
          },
          "unlockStake()": {
            "notice": "unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
          },
          "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
            "notice": "payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
          },
          "withdrawStake(address)": {
            "notice": "withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
          },
          "withdrawTo(address,uint256)": {
            "notice": "withdraw value from the deposit"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/",
        ":@eth-infinitism/contracts/=lib/eth-infinitism/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-infinitism/=lib/eth-infinitism/contracts/",
        ":forge-std/=lib/forge-std/src/",
        ":foundry-devops/=lib/foundry-devops/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/TokenPaymaster.sol": "TokenPaymaster"
      },
      "libraries": {}
    },
    "sources": {
      "lib/eth-infinitism/contracts/core/BasePaymaster.sol": {
        "keccak256": "0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443",
        "urls": [
          "bzz-raw://426f0c6565ae612d34ae184fb1582e6fc360abf79450975c1c2dd439184094a0",
          "dweb:/ipfs/QmZMeMosC1P6Z5BQyT6iGFQrY6ui5ART65ycVWmXFnDpoq"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/core/Helpers.sol": {
        "keccak256": "0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a",
        "urls": [
          "bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746",
          "dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IAggregator.sol": {
        "keccak256": "0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a",
        "urls": [
          "bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b",
          "dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol": {
        "keccak256": "0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8",
        "urls": [
          "bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf",
          "dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/INonceManager.sol": {
        "keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
        "urls": [
          "bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
          "dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IPaymaster.sol": {
        "keccak256": "0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456",
        "urls": [
          "bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8",
          "dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia"
        ],
        "license": "GPL-3.0"
      },
      "lib/eth-infinitism/contracts/interfaces/IStakeManager.sol": {
        "keccak256": "0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f",
        "urls": [
          "bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3",
          "dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ"
        ],
        "license": "GPL-3.0-only"
      },
      "lib/eth-infinitism/contracts/interfaces/UserOperation.sol": {
        "keccak256": "0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c",
        "urls": [
          "bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c",
          "dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN"
        ],
        "license": "GPL-3.0"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d",
        "urls": [
          "bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d",
          "dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/TokenPaymaster.sol": {
        "keccak256": "0xc392e15dd7564580628ed674b5781180ea2040ef5f4766a1fce65f1c74ae96f2",
        "urls": [
          "bzz-raw://59956598916e9974398be60866e257ca9d52b12d511310525329739837e44e4a",
          "dweb:/ipfs/QmPifXpaV6ZkxeKkk9m6CYW7YrN6mBSJce9CHdwhXXodPV"
        ],
        "license": "GPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/TokenPaymaster.sol",
    "id": 2156,
    "exportedSymbols": {
      "BasePaymaster": [
        219
      ],
      "ERC20": [
        1756
      ],
      "IEntryPoint": [
        698
      ],
      "TokenPaymaster": [
        2155
      ],
      "UserOperation": [
        886
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:5715:13",
    "nodes": [
      {
        "id": 1883,
        "nodeType": "PragmaDirective",
        "src": "36:24:13",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".20"
        ]
      },
      {
        "id": 1885,
        "nodeType": "ImportDirective",
        "src": "62:68:13",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2156,
        "sourceUnit": 1757,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1884,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1756,
              "src": "70:5:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1887,
        "nodeType": "ImportDirective",
        "src": "131:79:13",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/core/BasePaymaster.sol",
        "file": "@eth-infinitism/contracts/core/BasePaymaster.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2156,
        "sourceUnit": 220,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1886,
              "name": "BasePaymaster",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 219,
              "src": "139:13:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1889,
        "nodeType": "ImportDirective",
        "src": "211:81:13",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/interfaces/IEntryPoint.sol",
        "file": "@eth-infinitism/contracts/interfaces/IEntryPoint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2156,
        "sourceUnit": 699,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1888,
              "name": "IEntryPoint",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 698,
              "src": "219:11:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1891,
        "nodeType": "ImportDirective",
        "src": "293:85:13",
        "nodes": [],
        "absolutePath": "lib/eth-infinitism/contracts/interfaces/UserOperation.sol",
        "file": "@eth-infinitism/contracts/interfaces/UserOperation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2156,
        "sourceUnit": 1057,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1890,
              "name": "UserOperation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 886,
              "src": "301:13:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 2155,
        "nodeType": "ContractDefinition",
        "src": "1400:4350:13",
        "nodes": [
          {
            "id": 1899,
            "nodeType": "VariableDeclaration",
            "src": "1490:44:13",
            "nodes": [],
            "constant": true,
            "functionSelector": "796d4371",
            "mutability": "constant",
            "name": "COST_OF_POST",
            "nameLocation": "1514:12:13",
            "scope": 2155,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1897,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1490:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3135303030",
              "id": 1898,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1529:5:13",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_15000_by_1",
                "typeString": "int_const 15000"
              },
              "value": "15000"
            },
            "visibility": "public"
          },
          {
            "id": 1901,
            "nodeType": "VariableDeclaration",
            "src": "1541:35:13",
            "nodes": [],
            "constant": false,
            "functionSelector": "9f5ca221",
            "mutability": "immutable",
            "name": "theFactory",
            "nameLocation": "1566:10:13",
            "scope": 2155,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1900,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1541:7:13",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 1945,
            "nodeType": "FunctionDefinition",
            "src": "1583:400:13",
            "nodes": [],
            "body": {
              "id": 1944,
              "nodeType": "Block",
              "src": "1738:245:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 1920,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1918,
                      "name": "theFactory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1901,
                      "src": "1748:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1919,
                      "name": "accountFactory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1903,
                      "src": "1761:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1748:27:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1921,
                  "nodeType": "ExpressionStatement",
                  "src": "1748:27:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1925,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1827:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          ],
                          "id": 1924,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1819:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1923,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1819:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1926,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1819:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 1927,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1834:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        }
                      ],
                      "id": 1922,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1573,
                      "src": "1813:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1813:23:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1929,
                  "nodeType": "ExpressionStatement",
                  "src": "1813:23:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1933,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "1939:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          ],
                          "id": 1932,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1931:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1931,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1931:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1934,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1931:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 1935,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1946:3:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1936,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1950:6:13",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1946:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1939,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1963:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1938,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1963:7:13",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 1937,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "1958:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1940,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1958:13:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 1941,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1972:3:13",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "1958:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1930,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1690,
                      "src": "1922:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1942,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1922:54:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1943,
                  "nodeType": "ExpressionStatement",
                  "src": "1922:54:13"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1911,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1905,
                    "src": "1681:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 1912,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1905,
                    "src": "1690:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 1913,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1910,
                  "name": "ERC20",
                  "nameLocations": [
                    "1675:5:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1756,
                  "src": "1675:5:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "1675:23:13"
              },
              {
                "arguments": [
                  {
                    "id": 1915,
                    "name": "_entryPoint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1908,
                    "src": "1721:11:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$698",
                      "typeString": "contract IEntryPoint"
                    }
                  }
                ],
                "id": 1916,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1914,
                  "name": "BasePaymaster",
                  "nameLocations": [
                    "1707:13:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 219,
                  "src": "1707:13:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "1707:26:13"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 1909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1903,
                  "mutability": "mutable",
                  "name": "accountFactory",
                  "nameLocation": "1603:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1945,
                  "src": "1595:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1902,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1595:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1905,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1633:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1945,
                  "src": "1619:21:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1904,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1619:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1908,
                  "mutability": "mutable",
                  "name": "_entryPoint",
                  "nameLocation": "1654:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1945,
                  "src": "1642:23:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IEntryPoint_$698",
                    "typeString": "contract IEntryPoint"
                  },
                  "typeName": {
                    "id": 1907,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1906,
                      "name": "IEntryPoint",
                      "nameLocations": [
                        "1642:11:13"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 698,
                      "src": "1642:11:13"
                    },
                    "referencedDeclaration": 698,
                    "src": "1642:11:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEntryPoint_$698",
                      "typeString": "contract IEntryPoint"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1594:72:13"
            },
            "returnParameters": {
              "id": 1917,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1738:0:13"
            },
            "scope": 2155,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 1961,
            "nodeType": "FunctionDefinition",
            "src": "2186:115:13",
            "nodes": [],
            "body": {
              "id": 1960,
              "nodeType": "Block",
              "src": "2260:41:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1956,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1948,
                        "src": "2276:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1957,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1950,
                        "src": "2287:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1955,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1573,
                      "src": "2270:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2270:24:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1959,
                  "nodeType": "ExpressionStatement",
                  "src": "2270:24:13"
                }
              ]
            },
            "documentation": {
              "id": 1946,
              "nodeType": "StructuredDocumentation",
              "src": "1989:192:13",
              "text": " helpers for owner, to mint and withdraw tokens.\n @param recipient - the address that will receive the minted tokens.\n @param amount - the amount it will receive."
            },
            "functionSelector": "f0dda65c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1953,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1952,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2250:9:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1088,
                  "src": "2250:9:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "2250:9:13"
              }
            ],
            "name": "mintTokens",
            "nameLocation": "2195:10:13",
            "parameters": {
              "id": 1951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1948,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "2214:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1961,
                  "src": "2206:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1947,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2206:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1950,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2233:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1961,
                  "src": "2225:14:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1949,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2225:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2205:35:13"
            },
            "returnParameters": {
              "id": 1954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2260:0:13"
            },
            "scope": 2155,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2000,
            "nodeType": "FunctionDefinition",
            "src": "2544:361:13",
            "nodes": [],
            "body": {
              "id": 1999,
              "nodeType": "Block",
              "src": "2623:282:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1973,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2695:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          ],
                          "id": 1972,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2687:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1971,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2687:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1974,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2687:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1975,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1097,
                          "src": "2702:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1976,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2702:7:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 1977,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2711:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 1970,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1690,
                      "src": "2678:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2678:35:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1979,
                  "nodeType": "ExpressionStatement",
                  "src": "2678:35:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1983,
                        "name": "newOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1964,
                        "src": "2747:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1980,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2723:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_TokenPaymaster_$2155_$",
                          "typeString": "type(contract super TokenPaymaster)"
                        }
                      },
                      "id": 1982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2729:17:13",
                      "memberName": "transferOwnership",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1148,
                      "src": "2723:23:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1984,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2723:33:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1985,
                  "nodeType": "ExpressionStatement",
                  "src": "2723:33:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1989,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2863:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          ],
                          "id": 1988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2855:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1987,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2855:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1990,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2855:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1991,
                        "name": "newOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1964,
                        "src": "2870:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1994,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2885:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1993,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2885:7:13",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 1992,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "2880:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2880:13:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 1996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2894:3:13",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "2880:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1986,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1690,
                      "src": "2846:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1997,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2846:52:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1998,
                  "nodeType": "ExpressionStatement",
                  "src": "2846:52:13"
                }
              ]
            },
            "baseFunctions": [
              1148
            ],
            "documentation": {
              "id": 1962,
              "nodeType": "StructuredDocumentation",
              "src": "2307:232:13",
              "text": " transfer paymaster ownership.\n owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance)\n when changing owner, the old owner's withdrawal rights are revoked."
            },
            "functionSelector": "f2fde38b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1968,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1967,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2613:9:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1088,
                  "src": "2613:9:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "2613:9:13"
              }
            ],
            "name": "transferOwnership",
            "nameLocation": "2553:17:13",
            "overrides": {
              "id": 1966,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2604:8:13"
            },
            "parameters": {
              "id": 1965,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1964,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "2579:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2000,
                  "src": "2571:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1963,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2571:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2570:18:13"
            },
            "returnParameters": {
              "id": 1969,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2623:0:13"
            },
            "scope": 2155,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 2012,
            "nodeType": "FunctionDefinition",
            "src": "3036:135:13",
            "nodes": [],
            "body": {
              "id": 2011,
              "nodeType": "Block",
              "src": "3133:38:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2007,
                      "name": "valueEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2002,
                      "src": "3150:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 2008,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3161:3:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "3150:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2006,
                  "id": 2010,
                  "nodeType": "Return",
                  "src": "3143:21:13"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenValueOfEth",
            "nameLocation": "3045:18:13",
            "parameters": {
              "id": 2003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2002,
                  "mutability": "mutable",
                  "name": "valueEth",
                  "nameLocation": "3072:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2012,
                  "src": "3064:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2001,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3064:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3063:18:13"
            },
            "returnParameters": {
              "id": 2006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2005,
                  "mutability": "mutable",
                  "name": "valueToken",
                  "nameLocation": "3121:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2012,
                  "src": "3113:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3113:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3112:20:13"
            },
            "scope": 2155,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2083,
            "nodeType": "FunctionDefinition",
            "src": "3418:949:13",
            "nodes": [],
            "body": {
              "id": 2082,
              "nodeType": "Block",
              "src": "3646:721:13",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    2029
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2029,
                      "mutability": "mutable",
                      "name": "tokenPrefund",
                      "nameLocation": "3664:12:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 2082,
                      "src": "3656:20:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2028,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3656:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2033,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2031,
                        "name": "requiredPreFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2020,
                        "src": "3698:15:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2030,
                      "name": "getTokenValueOfEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2012,
                      "src": "3679:18:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 2032,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3679:35:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3656:58:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2038,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2035,
                            "name": "userOp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2016,
                            "src": "3915:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                              "typeString": "struct UserOperation calldata"
                            }
                          },
                          "id": 2036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3922:20:13",
                          "memberName": "verificationGasLimit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 875,
                          "src": "3915:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 2037,
                          "name": "COST_OF_POST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1899,
                          "src": "3945:12:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3915:42:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e5061796d61737465723a2067617320746f6f206c6f7720666f7220706f73744f70",
                        "id": 2039,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3959:40:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e63029b4be8f7147d8fa8c7176417177721349d796aec4cd58131ce1ae4a4e98",
                          "typeString": "literal_string \"TokenPaymaster: gas too low for postOp\""
                        },
                        "value": "TokenPaymaster: gas too low for postOp"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e63029b4be8f7147d8fa8c7176417177721349d796aec4cd58131ce1ae4a4e98",
                          "typeString": "literal_string \"TokenPaymaster: gas too low for postOp\""
                        }
                      ],
                      "id": 2034,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3907:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2040,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3907:93:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2041,
                  "nodeType": "ExpressionStatement",
                  "src": "3907:93:13"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2046,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "expression": {
                          "id": 2042,
                          "name": "userOp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2016,
                          "src": "4015:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                            "typeString": "struct UserOperation calldata"
                          }
                        },
                        "id": 2043,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4022:8:13",
                        "memberName": "initCode",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 869,
                        "src": "4015:15:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 2044,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4031:6:13",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "4015:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2045,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4041:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4015:27:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 2072,
                    "nodeType": "Block",
                    "src": "4209:104:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2068,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2064,
                                      "name": "userOp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2016,
                                      "src": "4241:6:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                        "typeString": "struct UserOperation calldata"
                                      }
                                    },
                                    "id": 2065,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4248:6:13",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 865,
                                    "src": "4241:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2063,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1268,
                                  "src": "4231:9:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 2066,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4231:24:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2067,
                                "name": "tokenPrefund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2029,
                                "src": "4259:12:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4231:40:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "546f6b656e5061796d61737465723a206e6f2062616c616e6365",
                              "id": 2069,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4273:28:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ba1208b32158094aac35ebe5e696720821cdfa1d15e4b106c836c9b43fcf322a",
                                "typeString": "literal_string \"TokenPaymaster: no balance\""
                              },
                              "value": "TokenPaymaster: no balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ba1208b32158094aac35ebe5e696720821cdfa1d15e4b106c836c9b43fcf322a",
                                "typeString": "literal_string \"TokenPaymaster: no balance\""
                              }
                            ],
                            "id": 2062,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4223:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2070,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4223:79:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2071,
                        "nodeType": "ExpressionStatement",
                        "src": "4223:79:13"
                      }
                    ]
                  },
                  "id": 2073,
                  "nodeType": "IfStatement",
                  "src": "4011:302:13",
                  "trueBody": {
                    "id": 2061,
                    "nodeType": "Block",
                    "src": "4044:159:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2048,
                              "name": "userOp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2016,
                              "src": "4079:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            ],
                            "id": 2047,
                            "name": "_validateConstructor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2111,
                            "src": "4058:20:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_UserOperation_$886_calldata_ptr_$returns$__$",
                              "typeString": "function (struct UserOperation calldata) view"
                            }
                          },
                          "id": 2049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4058:28:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2050,
                        "nodeType": "ExpressionStatement",
                        "src": "4058:28:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2057,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2053,
                                      "name": "userOp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2016,
                                      "src": "4118:6:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                        "typeString": "struct UserOperation calldata"
                                      }
                                    },
                                    "id": 2054,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4125:6:13",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 865,
                                    "src": "4118:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2052,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1268,
                                  "src": "4108:9:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view returns (uint256)"
                                  }
                                },
                                "id": 2055,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4108:24:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2056,
                                "name": "tokenPrefund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2029,
                                "src": "4136:12:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4108:40:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "546f6b656e5061796d61737465723a206e6f2062616c616e636520287072652d63726561746529",
                              "id": 2058,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4150:41:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a3a5fd70368e4e698a4b1ca2306756bd67295a1b90e45690e5829cd9be775e0d",
                                "typeString": "literal_string \"TokenPaymaster: no balance (pre-create)\""
                              },
                              "value": "TokenPaymaster: no balance (pre-create)"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a3a5fd70368e4e698a4b1ca2306756bd67295a1b90e45690e5829cd9be775e0d",
                                "typeString": "literal_string \"TokenPaymaster: no balance (pre-create)\""
                              }
                            ],
                            "id": 2051,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4100:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2059,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4100:92:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2060,
                        "nodeType": "ExpressionStatement",
                        "src": "4100:92:13"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2076,
                              "name": "userOp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2016,
                              "src": "4342:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                "typeString": "struct UserOperation calldata"
                              }
                            },
                            "id": 2077,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4349:6:13",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 865,
                            "src": "4342:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 2074,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4331:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 2075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4335:6:13",
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "4331:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 2078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4331:25:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 2079,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4358:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 2080,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4330:30:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_rational_0_by_1_$",
                      "typeString": "tuple(bytes memory,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 2027,
                  "id": 2081,
                  "nodeType": "Return",
                  "src": "4323:37:13"
                }
              ]
            },
            "baseFunctions": [
              64
            ],
            "documentation": {
              "id": 2013,
              "nodeType": "StructuredDocumentation",
              "src": "3177:236:13",
              "text": " validate the request:\n if this is a constructor call, make sure it is a known account.\n verify the sender has enough tokens.\n (since the paymaster is also the token, there is no notion of \"approval\")"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validatePaymasterUserOp",
            "nameLocation": "3427:24:13",
            "overrides": {
              "id": 2022,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3570:8:13"
            },
            "parameters": {
              "id": 2021,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2016,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "3475:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2083,
                  "src": "3452:29:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 2015,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2014,
                      "name": "UserOperation",
                      "nameLocations": [
                        "3452:13:13"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 886,
                      "src": "3452:13:13"
                    },
                    "referencedDeclaration": 886,
                    "src": "3452:13:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$886_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2018,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2083,
                  "src": "3483:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2017,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3483:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2020,
                  "mutability": "mutable",
                  "name": "requiredPreFund",
                  "nameLocation": "3515:15:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2083,
                  "src": "3507:23:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2019,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3507:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3451:80:13"
            },
            "returnParameters": {
              "id": 2027,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2024,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "3609:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2083,
                  "src": "3596:20:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2023,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3596:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2026,
                  "mutability": "mutable",
                  "name": "validationData",
                  "nameLocation": "3626:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2083,
                  "src": "3618:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2025,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3618:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3595:46:13"
            },
            "scope": 2155,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 2111,
            "nodeType": "FunctionDefinition",
            "src": "4531:238:13",
            "nodes": [],
            "body": {
              "id": 2110,
              "nodeType": "Block",
              "src": "4614:155:13",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    2090
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2090,
                      "mutability": "mutable",
                      "name": "factory",
                      "nameLocation": "4632:7:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 2110,
                      "src": "4624:15:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2089,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4624:7:13",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2102,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "baseExpression": {
                              "expression": {
                                "id": 2095,
                                "name": "userOp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2086,
                                "src": "4658:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                                  "typeString": "struct UserOperation calldata"
                                }
                              },
                              "id": 2096,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4665:8:13",
                              "memberName": "initCode",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 869,
                              "src": "4658:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            "endExpression": {
                              "hexValue": "3230",
                              "id": 2098,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4676:2:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            },
                            "id": 2099,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexRangeAccess",
                            "src": "4658:21:13",
                            "startExpression": {
                              "hexValue": "30",
                              "id": 2097,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4674:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr_slice",
                              "typeString": "bytes calldata slice"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr_slice",
                              "typeString": "bytes calldata slice"
                            }
                          ],
                          "id": 2094,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4650:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes20_$",
                            "typeString": "type(bytes20)"
                          },
                          "typeName": {
                            "id": 2093,
                            "name": "bytes20",
                            "nodeType": "ElementaryTypeName",
                            "src": "4650:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4650:30:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes20",
                          "typeString": "bytes20"
                        }
                      ],
                      "id": 2092,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4642:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 2091,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4642:7:13",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 2101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4642:39:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4624:57:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 2106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2104,
                          "name": "factory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2090,
                          "src": "4699:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 2105,
                          "name": "theFactory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1901,
                          "src": "4710:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4699:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e5061796d61737465723a2077726f6e67206163636f756e7420666163746f7279",
                        "id": 2107,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4722:39:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c8acd6a8133474c975607944c89a9c2827b6234a8b3c94e8e794cae85c818cf6",
                          "typeString": "literal_string \"TokenPaymaster: wrong account factory\""
                        },
                        "value": "TokenPaymaster: wrong account factory"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c8acd6a8133474c975607944c89a9c2827b6234a8b3c94e8e794cae85c818cf6",
                          "typeString": "literal_string \"TokenPaymaster: wrong account factory\""
                        }
                      ],
                      "id": 2103,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4691:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4691:71:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2109,
                  "nodeType": "ExpressionStatement",
                  "src": "4691:71:13"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_validateConstructor",
            "nameLocation": "4540:20:13",
            "parameters": {
              "id": 2087,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2086,
                  "mutability": "mutable",
                  "name": "userOp",
                  "nameLocation": "4584:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2111,
                  "src": "4561:29:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_UserOperation_$886_calldata_ptr",
                    "typeString": "struct UserOperation"
                  },
                  "typeName": {
                    "id": 2085,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2084,
                      "name": "UserOperation",
                      "nameLocations": [
                        "4561:13:13"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 886,
                      "src": "4561:13:13"
                    },
                    "referencedDeclaration": 886,
                    "src": "4561:13:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_UserOperation_$886_storage_ptr",
                      "typeString": "struct UserOperation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4560:31:13"
            },
            "returnParameters": {
              "id": 2088,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4614:0:13"
            },
            "scope": 2155,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2154,
            "nodeType": "FunctionDefinition",
            "src": "5240:508:13",
            "nodes": [],
            "body": {
              "id": 2153,
              "nodeType": "Block",
              "src": "5339:409:13",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 2123,
                        "name": "mode",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2115,
                        "src": "5441:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PostOpMode_$725",
                          "typeString": "enum IPaymaster.PostOpMode"
                        }
                      }
                    ],
                    "id": 2124,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5440:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PostOpMode_$725",
                      "typeString": "enum IPaymaster.PostOpMode"
                    }
                  },
                  "id": 2125,
                  "nodeType": "ExpressionStatement",
                  "src": "5440:6:13"
                },
                {
                  "assignments": [
                    2127
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2127,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "5464:6:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 2153,
                      "src": "5456:14:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2126,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5456:7:13",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2135,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2130,
                        "name": "context",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2117,
                        "src": "5484:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 2132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5494:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 2131,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5494:7:13",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 2133,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "5493:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        }
                      ],
                      "expression": {
                        "id": 2128,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5473:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 2129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "5477:6:13",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "5473:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 2134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5473:30:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5456:47:13"
                },
                {
                  "assignments": [
                    2137
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2137,
                      "mutability": "mutable",
                      "name": "charge",
                      "nameLocation": "5521:6:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 2153,
                      "src": "5513:14:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2136,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5513:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2143,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2141,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2139,
                          "name": "actualGasCost",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2119,
                          "src": "5549:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 2140,
                          "name": "COST_OF_POST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1899,
                          "src": "5565:12:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5549:28:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2138,
                      "name": "getTokenValueOfEth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2012,
                      "src": "5530:18:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 2142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5530:48:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5513:65:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2145,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2127,
                        "src": "5711:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 2148,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "5727:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenPaymaster_$2155",
                              "typeString": "contract TokenPaymaster"
                            }
                          ],
                          "id": 2147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5719:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2146,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5719:7:13",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2149,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5719:13:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2150,
                        "name": "charge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2137,
                        "src": "5734:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2144,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1516,
                      "src": "5701:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 2151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5701:40:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2152,
                  "nodeType": "ExpressionStatement",
                  "src": "5701:40:13"
                }
              ]
            },
            "baseFunctions": [
              107
            ],
            "documentation": {
              "id": 2112,
              "nodeType": "StructuredDocumentation",
              "src": "4775:460:13",
              "text": " actual charge of user.\n this method will be called just after the user's TX with mode==OpSucceeded|OpReverted (account pays in both cases)\n BUT: if the user changed its balance in a way that will cause  postOp to revert, then it gets called again, after reverting\n the user's TX , back to the state it was before the transaction started (before the validatePaymasterUserOp),\n and the transaction should succeed there."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_postOp",
            "nameLocation": "5249:7:13",
            "overrides": {
              "id": 2121,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5330:8:13"
            },
            "parameters": {
              "id": 2120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2115,
                  "mutability": "mutable",
                  "name": "mode",
                  "nameLocation": "5268:4:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2154,
                  "src": "5257:15:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_PostOpMode_$725",
                    "typeString": "enum IPaymaster.PostOpMode"
                  },
                  "typeName": {
                    "id": 2114,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2113,
                      "name": "PostOpMode",
                      "nameLocations": [
                        "5257:10:13"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 725,
                      "src": "5257:10:13"
                    },
                    "referencedDeclaration": 725,
                    "src": "5257:10:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_PostOpMode_$725",
                      "typeString": "enum IPaymaster.PostOpMode"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2117,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "5289:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2154,
                  "src": "5274:22:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2116,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5274:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2119,
                  "mutability": "mutable",
                  "name": "actualGasCost",
                  "nameLocation": "5306:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 2154,
                  "src": "5298:21:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2118,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5298:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5256:64:13"
            },
            "returnParameters": {
              "id": 2122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5339:0:13"
            },
            "scope": 2155,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1893,
              "name": "BasePaymaster",
              "nameLocations": [
                "1427:13:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 219,
              "src": "1427:13:13"
            },
            "id": 1894,
            "nodeType": "InheritanceSpecifier",
            "src": "1427:13:13"
          },
          {
            "baseName": {
              "id": 1895,
              "name": "ERC20",
              "nameLocations": [
                "1442:5:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1756,
              "src": "1442:5:13"
            },
            "id": 1896,
            "nodeType": "InheritanceSpecifier",
            "src": "1442:5:13"
          }
        ],
        "canonicalName": "TokenPaymaster",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1892,
          "nodeType": "StructuredDocumentation",
          "src": "379:1019:13",
          "text": " A sample paymaster that defines itself as a token to pay for gas.\n The paymaster IS the token to use, since a paymaster cannot use an external contract.\n Also, the exchange rate has to be fixed, since it can't reference an external Uniswap or other exchange contract.\n subclass should override \"getTokenValueOfEth\" to provide actual token exchange rate, settable by the owner.\n Known Limitation: this paymaster is exploitable when put into a batch with multiple ops (of different accounts):\n - while a single op can't exploit the paymaster (if postOp fails to withdraw the tokens, the user's op is reverted,\n   and then we know we can withdraw the tokens), multiple ops with different senders (all using this paymaster)\n   in a batch can withdraw funds from 2nd and further ops, forcing the paymaster itself to pay (from its deposit)\n - Possible workarounds are either use a more complex paymaster scheme (e.g. the DepositPaymaster) or\n   to whitelist the account and the called method ids."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          2155,
          1756,
          1859,
          1834,
          219,
          1169,
          1881,
          752
        ],
        "name": "TokenPaymaster",
        "nameLocation": "1409:14:13",
        "scope": 2156,
        "usedErrors": [],
        "usedEvents": [
          1070,
          1768,
          1777
        ]
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 13
}